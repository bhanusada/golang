//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		sample.xsd
package go_Sample



import (
	xsdt "github.com/metaleap/go-xsd/types"
)

type XsdGoPkgHasElem_TransactionCode struct {
	TransactionCode xsdt.NCName `xml:"transactionCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_TransactionCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TransactionCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TransactionCode instance.
func (me *XsdGoPkgHasElem_TransactionCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_TransactionCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_CurrentTimestamp struct {
	CurrentTimestamp xsdt.Nmtoken `xml:"currentTimestamp"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_CurrentTimestamp function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CurrentTimestamp instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CurrentTimestamp instance.
func (me *XsdGoPkgHasElem_CurrentTimestamp) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_CurrentTimestamp; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_ConsignmentFlag struct {
	ConsignmentFlag xsdt.Boolean `xml:"consignmentFlag"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_ConsignmentFlag function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ConsignmentFlag instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ConsignmentFlag instance.
func (me *XsdGoPkgHasElem_ConsignmentFlag) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_ConsignmentFlag; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_SrcOrderRefId struct {
	SrcOrderRefId xsdt.Integer `xml:"srcOrderRefId"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_SrcOrderRefId function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SrcOrderRefId instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SrcOrderRefId instance.
func (me *XsdGoPkgHasElem_SrcOrderRefId) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_SrcOrderRefId; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_DistributionServiceTypeCode struct {
	DistributionServiceTypeCode xsdt.Integer `xml:"distributionServiceTypeCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_DistributionServiceTypeCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DistributionServiceTypeCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DistributionServiceTypeCode instance.
func (me *XsdGoPkgHasElem_DistributionServiceTypeCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_DistributionServiceTypeCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_LastUpdatedTimestamp struct {
	LastUpdatedTimestamp xsdt.Nmtoken `xml:"lastUpdatedTimestamp"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_LastUpdatedTimestamp function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LastUpdatedTimestamp instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LastUpdatedTimestamp instance.
func (me *XsdGoPkgHasElem_LastUpdatedTimestamp) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_LastUpdatedTimestamp; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_EstimatedShipDate struct {
	EstimatedShipDate xsdt.Nmtoken `xml:"estimatedShipDate"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_EstimatedShipDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EstimatedShipDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_EstimatedShipDate instance.
func (me *XsdGoPkgHasElem_EstimatedShipDate) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_EstimatedShipDate; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_OmtOrderTypeCode struct {
	OmtOrderTypeCode xsdt.Integer `xml:"omtOrderTypeCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_OmtOrderTypeCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OmtOrderTypeCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OmtOrderTypeCode instance.
func (me *XsdGoPkgHasElem_OmtOrderTypeCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_OmtOrderTypeCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_ProductDestinationTypeCode struct {
	ProductDestinationTypeCode xsdt.Integer `xml:"productDestinationTypeCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_ProductDestinationTypeCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ProductDestinationTypeCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ProductDestinationTypeCode instance.
func (me *XsdGoPkgHasElem_ProductDestinationTypeCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_ProductDestinationTypeCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_OrderOpenTimestamp struct {
	OrderOpenTimestamp xsdt.Nmtoken `xml:"orderOpenTimestamp"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_OrderOpenTimestamp function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OrderOpenTimestamp instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OrderOpenTimestamp instance.
func (me *XsdGoPkgHasElem_OrderOpenTimestamp) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_OrderOpenTimestamp; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_PaymentTermDescription struct {
	PaymentTermDescription xsdt.String `xml:"paymentTermDescription"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_PaymentTermDescription function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PaymentTermDescription instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PaymentTermDescription instance.
func (me *XsdGoPkgHasElem_PaymentTermDescription) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_PaymentTermDescription; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_StoreTermIdentifier struct {
	StoreTermIdentifier xsdt.Nmtoken `xml:"storeTermIdentifier"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_StoreTermIdentifier function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StoreTermIdentifier instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_StoreTermIdentifier instance.
func (me *XsdGoPkgHasElem_StoreTermIdentifier) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_StoreTermIdentifier; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_BasisDateTypeCode struct {
	BasisDateTypeCode xsdt.NCName `xml:"basisDateTypeCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_BasisDateTypeCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BasisDateTypeCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_BasisDateTypeCode instance.
func (me *XsdGoPkgHasElem_BasisDateTypeCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_BasisDateTypeCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_PaymentTermDiscountPercent struct {
	PaymentTermDiscountPercent xsdt.Decimal `xml:"paymentTermDiscountPercent"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_PaymentTermDiscountPercent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PaymentTermDiscountPercent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PaymentTermDiscountPercent instance.
func (me *XsdGoPkgHasElem_PaymentTermDiscountPercent) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_PaymentTermDiscountPercent; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_PaymentTermTypeCode struct {
	PaymentTermTypeCode xsdt.NCName `xml:"paymentTermTypeCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_PaymentTermTypeCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PaymentTermTypeCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PaymentTermTypeCode instance.
func (me *XsdGoPkgHasElem_PaymentTermTypeCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_PaymentTermTypeCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_PaymentTermNumber struct {
	PaymentTermNumber xsdt.Integer `xml:"paymentTermNumber"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_PaymentTermNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PaymentTermNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PaymentTermNumber instance.
func (me *XsdGoPkgHasElem_PaymentTermNumber) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_PaymentTermNumber; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type TxsdPaymentTermDetail struct {
	XsdGoPkgHasElem_PaymentTermTypeCode

	XsdGoPkgHasElem_PaymentTermNumber

	XsdGoPkgHasElem_PaymentTermDescription

	XsdGoPkgHasElem_StoreTermIdentifier

	XsdGoPkgHasElem_BasisDateTypeCode

	XsdGoPkgHasElem_PaymentTermDiscountPercent

}

//	If the WalkHandlers.TxsdPaymentTermDetail function is not nil (ie. was set by outside code), calls it with this TxsdPaymentTermDetail instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdPaymentTermDetail instance.
func (me *TxsdPaymentTermDetail) Walk () (err error) { 
	if fn := WalkHandlers.TxsdPaymentTermDetail; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.XsdGoPkgHasElem_PaymentTermDescription.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_StoreTermIdentifier.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_BasisDateTypeCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_PaymentTermDiscountPercent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_PaymentTermTypeCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_PaymentTermNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_PaymentTermDetail struct {
	PaymentTermDetail *TxsdPaymentTermDetail `xml:"paymentTermDetail"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_PaymentTermDetail function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PaymentTermDetail instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PaymentTermDetail instance.
func (me *XsdGoPkgHasElem_PaymentTermDetail) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_PaymentTermDetail; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.PaymentTermDetail.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_LogId struct {
	LogId xsdt.Nmtoken `xml:"logId"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_LogId function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LogId instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LogId instance.
func (me *XsdGoPkgHasElem_LogId) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_LogId; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_OrderNumber struct {
	OrderNumber xsdt.Integer `xml:"orderNumber"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_OrderNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OrderNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OrderNumber instance.
func (me *XsdGoPkgHasElem_OrderNumber) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_OrderNumber; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_ProductOriginTypeCode struct {
	ProductOriginTypeCode xsdt.Integer `xml:"productOriginTypeCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_ProductOriginTypeCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ProductOriginTypeCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ProductOriginTypeCode instance.
func (me *XsdGoPkgHasElem_ProductOriginTypeCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_ProductOriginTypeCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_OrderStatusCode struct {
	OrderStatusCode xsdt.Integer `xml:"orderStatusCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_OrderStatusCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OrderStatusCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OrderStatusCode instance.
func (me *XsdGoPkgHasElem_OrderStatusCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_OrderStatusCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_KeyrecTypeIndicator struct {
	KeyrecTypeIndicator xsdt.NCName `xml:"keyrecTypeIndicator"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_KeyrecTypeIndicator function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_KeyrecTypeIndicator instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_KeyrecTypeIndicator instance.
func (me *XsdGoPkgHasElem_KeyrecTypeIndicator) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_KeyrecTypeIndicator; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_CancelEligibilityDate struct {
	CancelEligibilityDate xsdt.Nmtoken `xml:"cancelEligibilityDate"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_CancelEligibilityDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CancelEligibilityDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CancelEligibilityDate instance.
func (me *XsdGoPkgHasElem_CancelEligibilityDate) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_CancelEligibilityDate; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_SpecialOrderFlag struct {
	SpecialOrderFlag xsdt.Boolean `xml:"specialOrderFlag"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_SpecialOrderFlag function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SpecialOrderFlag instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SpecialOrderFlag instance.
func (me *XsdGoPkgHasElem_SpecialOrderFlag) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_SpecialOrderFlag; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_DocumentTypeCode struct {
	DocumentTypeCode xsdt.NCName `xml:"documentTypeCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_DocumentTypeCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DocumentTypeCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DocumentTypeCode instance.
func (me *XsdGoPkgHasElem_DocumentTypeCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_DocumentTypeCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_ReceivingLocationNumber struct {
	ReceivingLocationNumber xsdt.Integer `xml:"receivingLocationNumber"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_ReceivingLocationNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ReceivingLocationNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ReceivingLocationNumber instance.
func (me *XsdGoPkgHasElem_ReceivingLocationNumber) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_ReceivingLocationNumber; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_AccountOrderTypeCode struct {
	AccountOrderTypeCode xsdt.Integer `xml:"accountOrderTypeCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_AccountOrderTypeCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AccountOrderTypeCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AccountOrderTypeCode instance.
func (me *XsdGoPkgHasElem_AccountOrderTypeCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_AccountOrderTypeCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_PeggedOrderFlag struct {
	PeggedOrderFlag xsdt.Boolean `xml:"peggedOrderFlag"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_PeggedOrderFlag function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PeggedOrderFlag instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PeggedOrderFlag instance.
func (me *XsdGoPkgHasElem_PeggedOrderFlag) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_PeggedOrderFlag; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_OrderOpenSystemUserId struct {
	OrderOpenSystemUserId xsdt.NCName `xml:"orderOpenSystemUserId"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_OrderOpenSystemUserId function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OrderOpenSystemUserId instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OrderOpenSystemUserId instance.
func (me *XsdGoPkgHasElem_OrderOpenSystemUserId) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_OrderOpenSystemUserId; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_CommentText struct {
	CommentText xsdt.String `xml:"commentText"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_CommentText function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CommentText instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CommentText instance.
func (me *XsdGoPkgHasElem_CommentText) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_CommentText; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_OrderTransmissionTypeCode struct {
	OrderTransmissionTypeCode xsdt.Integer `xml:"orderTransmissionTypeCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_OrderTransmissionTypeCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OrderTransmissionTypeCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OrderTransmissionTypeCode instance.
func (me *XsdGoPkgHasElem_OrderTransmissionTypeCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_OrderTransmissionTypeCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_FreightTermCode struct {
	FreightTermCode xsdt.NCName `xml:"freightTermCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_FreightTermCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FreightTermCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_FreightTermCode instance.
func (me *XsdGoPkgHasElem_FreightTermCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_FreightTermCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_FreightOnboardCode struct {
	FreightOnboardCode xsdt.NCName `xml:"freightOnboardCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_FreightOnboardCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FreightOnboardCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_FreightOnboardCode instance.
func (me *XsdGoPkgHasElem_FreightOnboardCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_FreightOnboardCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_CurrencyTypeCode struct {
	CurrencyTypeCode xsdt.NCName `xml:"currencyTypeCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_CurrencyTypeCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CurrencyTypeCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CurrencyTypeCode instance.
func (me *XsdGoPkgHasElem_CurrencyTypeCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_CurrencyTypeCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_MerchandisingVendorNumber struct {
	MerchandisingVendorNumber xsdt.Integer `xml:"merchandisingVendorNumber"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_MerchandisingVendorNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MerchandisingVendorNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MerchandisingVendorNumber instance.
func (me *XsdGoPkgHasElem_MerchandisingVendorNumber) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_MerchandisingVendorNumber; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_ReplenishmentMethodCode struct {
	ReplenishmentMethodCode xsdt.Integer `xml:"replenishmentMethodCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_ReplenishmentMethodCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ReplenishmentMethodCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ReplenishmentMethodCode instance.
func (me *XsdGoPkgHasElem_ReplenishmentMethodCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_ReplenishmentMethodCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_OrderReasonCode struct {
	OrderReasonCode xsdt.Integer `xml:"orderReasonCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_OrderReasonCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OrderReasonCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OrderReasonCode instance.
func (me *XsdGoPkgHasElem_OrderReasonCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_OrderReasonCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_OrderCreateDate struct {
	OrderCreateDate xsdt.Nmtoken `xml:"orderCreateDate"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_OrderCreateDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OrderCreateDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OrderCreateDate instance.
func (me *XsdGoPkgHasElem_OrderCreateDate) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_OrderCreateDate; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_OrderCreateTimestamp struct {
	OrderCreateTimestamp xsdt.Nmtoken `xml:"orderCreateTimestamp"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_OrderCreateTimestamp function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OrderCreateTimestamp instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OrderCreateTimestamp instance.
func (me *XsdGoPkgHasElem_OrderCreateTimestamp) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_OrderCreateTimestamp; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_ExpectedArrivalDate struct {
	ExpectedArrivalDate xsdt.Nmtoken `xml:"expectedArrivalDate"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_ExpectedArrivalDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ExpectedArrivalDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ExpectedArrivalDate instance.
func (me *XsdGoPkgHasElem_ExpectedArrivalDate) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_ExpectedArrivalDate; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_VendorCertifiedFlag struct {
	VendorCertifiedFlag xsdt.Boolean `xml:"vendorCertifiedFlag"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_VendorCertifiedFlag function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_VendorCertifiedFlag instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_VendorCertifiedFlag instance.
func (me *XsdGoPkgHasElem_VendorCertifiedFlag) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_VendorCertifiedFlag; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_TransactionPurposeCode struct {
	TransactionPurposeCode xsdt.Integer `xml:"transactionPurposeCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_TransactionPurposeCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TransactionPurposeCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TransactionPurposeCode instance.
func (me *XsdGoPkgHasElem_TransactionPurposeCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_TransactionPurposeCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_MerchandisingDepartmentNumber struct {
	MerchandisingDepartmentNumber xsdt.Integer `xml:"merchandisingDepartmentNumber"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_MerchandisingDepartmentNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MerchandisingDepartmentNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_MerchandisingDepartmentNumber instance.
func (me *XsdGoPkgHasElem_MerchandisingDepartmentNumber) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_MerchandisingDepartmentNumber; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_OrderHeaderVersionNumber struct {
	OrderHeaderVersionNumber xsdt.Integer `xml:"orderHeaderVersionNumber"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_OrderHeaderVersionNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OrderHeaderVersionNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OrderHeaderVersionNumber instance.
func (me *XsdGoPkgHasElem_OrderHeaderVersionNumber) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_OrderHeaderVersionNumber; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_NewStoreFlag struct {
	NewStoreFlag xsdt.Boolean `xml:"newStoreFlag"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_NewStoreFlag function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NewStoreFlag instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_NewStoreFlag instance.
func (me *XsdGoPkgHasElem_NewStoreFlag) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_NewStoreFlag; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_StoreExceptionRequestFlag struct {
	StoreExceptionRequestFlag xsdt.Boolean `xml:"storeExceptionRequestFlag"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_StoreExceptionRequestFlag function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StoreExceptionRequestFlag instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_StoreExceptionRequestFlag instance.
func (me *XsdGoPkgHasElem_StoreExceptionRequestFlag) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_StoreExceptionRequestFlag; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_AddressLine1 struct {
	AddressLine1 xsdt.String `xml:"addressLine1"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_AddressLine1 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AddressLine1 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AddressLine1 instance.
func (me *XsdGoPkgHasElem_AddressLine1) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_AddressLine1; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type TxsdAddressLine2 struct {
}

//	If the WalkHandlers.TxsdAddressLine2 function is not nil (ie. was set by outside code), calls it with this TxsdAddressLine2 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this TxsdAddressLine2 instance.
func (me *TxsdAddressLine2) Walk () (err error) { 
	if fn := WalkHandlers.TxsdAddressLine2; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_AddressLine2 struct {
	AddressLine2 *TxsdAddressLine2 `xml:"addressLine2"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_AddressLine2 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AddressLine2 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AddressLine2 instance.
func (me *XsdGoPkgHasElem_AddressLine2) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_AddressLine2; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.AddressLine2.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_City struct {
	City xsdt.String `xml:"city"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_City function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_City instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_City instance.
func (me *XsdGoPkgHasElem_City) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_City; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_StateCode struct {
	StateCode xsdt.NCName `xml:"stateCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_StateCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StateCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_StateCode instance.
func (me *XsdGoPkgHasElem_StateCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_StateCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_ZipCode struct {
	ZipCode xsdt.Integer `xml:"zipCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_ZipCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ZipCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ZipCode instance.
func (me *XsdGoPkgHasElem_ZipCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_ZipCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type TxsdAddressDetail struct {
	XsdGoPkgHasElem_AddressLine1

	XsdGoPkgHasElem_AddressLine2

	XsdGoPkgHasElem_City

	XsdGoPkgHasElem_StateCode

	XsdGoPkgHasElem_ZipCode

}

//	If the WalkHandlers.TxsdAddressDetail function is not nil (ie. was set by outside code), calls it with this TxsdAddressDetail instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TxsdAddressDetail instance.
func (me *TxsdAddressDetail) Walk () (err error) { 
	if fn := WalkHandlers.TxsdAddressDetail; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.XsdGoPkgHasElem_AddressLine1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_AddressLine2.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_City.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_StateCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_ZipCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_AddressDetail struct {
	AddressDetail *TxsdAddressDetail `xml:"addressDetail"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_AddressDetail function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AddressDetail instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AddressDetail instance.
func (me *XsdGoPkgHasElem_AddressDetail) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_AddressDetail; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.AddressDetail.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_ReceivingLocationTypeCode struct {
	ReceivingLocationTypeCode xsdt.NCName `xml:"receivingLocationTypeCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_ReceivingLocationTypeCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ReceivingLocationTypeCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ReceivingLocationTypeCode instance.
func (me *XsdGoPkgHasElem_ReceivingLocationTypeCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_ReceivingLocationTypeCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_OrderClass struct {
	OrderClass xsdt.Integer `xml:"orderClass"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_OrderClass function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OrderClass instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OrderClass instance.
func (me *XsdGoPkgHasElem_OrderClass) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_OrderClass; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_OrderRequestingSystemCode struct {
	OrderRequestingSystemCode xsdt.Integer `xml:"orderRequestingSystemCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_OrderRequestingSystemCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OrderRequestingSystemCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OrderRequestingSystemCode instance.
func (me *XsdGoPkgHasElem_OrderRequestingSystemCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_OrderRequestingSystemCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_HeaderUpdatedFlag struct {
	HeaderUpdatedFlag xsdt.Boolean `xml:"headerUpdatedFlag"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_HeaderUpdatedFlag function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_HeaderUpdatedFlag instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_HeaderUpdatedFlag instance.
func (me *XsdGoPkgHasElem_HeaderUpdatedFlag) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_HeaderUpdatedFlag; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_OrderTypeCode struct {
	OrderTypeCode xsdt.NCName `xml:"orderTypeCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_OrderTypeCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OrderTypeCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OrderTypeCode instance.
func (me *XsdGoPkgHasElem_OrderTypeCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_OrderTypeCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type TxsdOrderHeader struct {
	XsdGoPkgHasElem_OrderRequestingSystemCode

	XsdGoPkgHasElem_HeaderUpdatedFlag

	XsdGoPkgHasElem_OrderTypeCode

	XsdGoPkgHasElem_ReceivingLocationTypeCode

	XsdGoPkgHasElem_OrderClass

	XsdGoPkgHasElem_ConsignmentFlag

	XsdGoPkgHasElem_SrcOrderRefId

	XsdGoPkgHasElem_EstimatedShipDate

	XsdGoPkgHasElem_OmtOrderTypeCode

	XsdGoPkgHasElem_ProductDestinationTypeCode

	XsdGoPkgHasElem_OrderOpenTimestamp

	XsdGoPkgHasElem_PaymentTermDetail

	XsdGoPkgHasElem_LogId

	XsdGoPkgHasElem_DistributionServiceTypeCode

	XsdGoPkgHasElem_LastUpdatedTimestamp

	XsdGoPkgHasElem_OrderStatusCode

	XsdGoPkgHasElem_KeyrecTypeIndicator

	XsdGoPkgHasElem_OrderNumber

	XsdGoPkgHasElem_ProductOriginTypeCode

	XsdGoPkgHasElem_DocumentTypeCode

	XsdGoPkgHasElem_CancelEligibilityDate

	XsdGoPkgHasElem_SpecialOrderFlag

	XsdGoPkgHasElem_PeggedOrderFlag

	XsdGoPkgHasElem_OrderOpenSystemUserId

	XsdGoPkgHasElem_CommentText

	XsdGoPkgHasElem_OrderTransmissionTypeCode

	XsdGoPkgHasElem_FreightTermCode

	XsdGoPkgHasElem_FreightOnboardCode

	XsdGoPkgHasElem_ReceivingLocationNumber

	XsdGoPkgHasElem_AccountOrderTypeCode

	XsdGoPkgHasElem_CurrencyTypeCode

	XsdGoPkgHasElem_OrderReasonCode

	XsdGoPkgHasElem_OrderCreateDate

	XsdGoPkgHasElem_OrderCreateTimestamp

	XsdGoPkgHasElem_ExpectedArrivalDate

	XsdGoPkgHasElem_VendorCertifiedFlag

	XsdGoPkgHasElem_TransactionPurposeCode

	XsdGoPkgHasElem_MerchandisingVendorNumber

	XsdGoPkgHasElem_ReplenishmentMethodCode

	XsdGoPkgHasElem_NewStoreFlag

	XsdGoPkgHasElem_StoreExceptionRequestFlag

	XsdGoPkgHasElem_AddressDetail

	XsdGoPkgHasElem_MerchandisingDepartmentNumber

	XsdGoPkgHasElem_OrderHeaderVersionNumber

}

//	If the WalkHandlers.TxsdOrderHeader function is not nil (ie. was set by outside code), calls it with this TxsdOrderHeader instance as the single argument. Then calls the Walk() method on 44/44 embed(s) and 0/0 field(s) belonging to this TxsdOrderHeader instance.
func (me *TxsdOrderHeader) Walk () (err error) { 
	if fn := WalkHandlers.TxsdOrderHeader; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.XsdGoPkgHasElem_CancelEligibilityDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_SpecialOrderFlag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_DocumentTypeCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_FreightOnboardCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_ReceivingLocationNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_AccountOrderTypeCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_PeggedOrderFlag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_OrderOpenSystemUserId.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_CommentText.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_OrderTransmissionTypeCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_FreightTermCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_CurrencyTypeCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_TransactionPurposeCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_MerchandisingVendorNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_ReplenishmentMethodCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_OrderReasonCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_OrderCreateDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_OrderCreateTimestamp.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_ExpectedArrivalDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_VendorCertifiedFlag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_MerchandisingDepartmentNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_OrderHeaderVersionNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_NewStoreFlag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_StoreExceptionRequestFlag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_AddressDetail.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_ReceivingLocationTypeCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_OrderClass.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_OrderRequestingSystemCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_HeaderUpdatedFlag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_OrderTypeCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_ConsignmentFlag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_SrcOrderRefId.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_LogId.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_DistributionServiceTypeCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_LastUpdatedTimestamp.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_EstimatedShipDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_OmtOrderTypeCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_ProductDestinationTypeCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_OrderOpenTimestamp.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_PaymentTermDetail.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_OrderNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_ProductOriginTypeCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_OrderStatusCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_KeyrecTypeIndicator.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_OrderHeader struct {
	OrderHeader *TxsdOrderHeader `xml:"orderHeader"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_OrderHeader function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OrderHeader instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_OrderHeader instance.
func (me *XsdGoPkgHasElem_OrderHeader) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_OrderHeader; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.OrderHeader.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_SubDiscountTypeCode struct {
	SubDiscountTypeCode xsdt.Integer `xml:"subDiscountTypeCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_SubDiscountTypeCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SubDiscountTypeCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SubDiscountTypeCode instance.
func (me *XsdGoPkgHasElem_SubDiscountTypeCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_SubDiscountTypeCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_SubDiscountPercent struct {
	SubDiscountPercent xsdt.Decimal `xml:"subDiscountPercent"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_SubDiscountPercent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SubDiscountPercent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SubDiscountPercent instance.
func (me *XsdGoPkgHasElem_SubDiscountPercent) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_SubDiscountPercent; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type TxsdSubDiscount struct {
	XsdGoPkgHasElem_SubDiscountTypeCode

	XsdGoPkgHasElem_SubDiscountPercent

}

//	If the WalkHandlers.TxsdSubDiscount function is not nil (ie. was set by outside code), calls it with this TxsdSubDiscount instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdSubDiscount instance.
func (me *TxsdSubDiscount) Walk () (err error) { 
	if fn := WalkHandlers.TxsdSubDiscount; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.XsdGoPkgHasElem_SubDiscountTypeCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_SubDiscountPercent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_SubDiscount struct {
	SubDiscounts []*TxsdSubDiscount `xml:"subDiscount"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_SubDiscount function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SubDiscount instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SubDiscount instance.
func (me *XsdGoPkgHasElems_SubDiscount) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_SubDiscount; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		for _, x := range me.SubDiscounts { if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type TxsdSubDiscounts struct {
	XsdGoPkgHasElems_SubDiscount

}

//	If the WalkHandlers.TxsdSubDiscounts function is not nil (ie. was set by outside code), calls it with this TxsdSubDiscounts instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdSubDiscounts instance.
func (me *TxsdSubDiscounts) Walk () (err error) { 
	if fn := WalkHandlers.TxsdSubDiscounts; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.XsdGoPkgHasElems_SubDiscount.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_SubDiscounts struct {
	SubDiscounts *TxsdSubDiscounts `xml:"subDiscounts"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_SubDiscounts function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SubDiscounts instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SubDiscounts instance.
func (me *XsdGoPkgHasElem_SubDiscounts) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_SubDiscounts; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.SubDiscounts.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_DiscountTypeCode struct {
	DiscountTypeCode xsdt.NCName `xml:"discountTypeCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_DiscountTypeCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DiscountTypeCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DiscountTypeCode instance.
func (me *XsdGoPkgHasElem_DiscountTypeCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_DiscountTypeCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_DiscountPercent struct {
	DiscountPercent xsdt.Decimal `xml:"discountPercent"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_DiscountPercent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DiscountPercent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DiscountPercent instance.
func (me *XsdGoPkgHasElem_DiscountPercent) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_DiscountPercent; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type TxsdDiscount struct {
	XsdGoPkgHasElem_DiscountTypeCode

	XsdGoPkgHasElem_DiscountPercent

	XsdGoPkgHasElem_SubDiscounts

}

//	If the WalkHandlers.TxsdDiscount function is not nil (ie. was set by outside code), calls it with this TxsdDiscount instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdDiscount instance.
func (me *TxsdDiscount) Walk () (err error) { 
	if fn := WalkHandlers.TxsdDiscount; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.XsdGoPkgHasElem_SubDiscounts.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_DiscountTypeCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_DiscountPercent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_Discount struct {
	Discounts []*TxsdDiscount `xml:"discount"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Discount function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Discount instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Discount instance.
func (me *XsdGoPkgHasElems_Discount) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Discount; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		for _, x := range me.Discounts { if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type TxsdDiscounts struct {
	XsdGoPkgHasElems_Discount

}

//	If the WalkHandlers.TxsdDiscounts function is not nil (ie. was set by outside code), calls it with this TxsdDiscounts instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdDiscounts instance.
func (me *TxsdDiscounts) Walk () (err error) { 
	if fn := WalkHandlers.TxsdDiscounts; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.XsdGoPkgHasElems_Discount.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_Discounts struct {
	Discounts *TxsdDiscounts `xml:"discounts"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Discounts function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Discounts instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Discounts instance.
func (me *XsdGoPkgHasElem_Discounts) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Discounts; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.Discounts.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_BuyPackVolumeUomCode struct {
	BuyPackVolumeUomCode xsdt.Integer `xml:"buyPackVolumeUomCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_BuyPackVolumeUomCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BuyPackVolumeUomCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_BuyPackVolumeUomCode instance.
func (me *XsdGoPkgHasElem_BuyPackVolumeUomCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_BuyPackVolumeUomCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_BuyPackWeightUomCode struct {
	BuyPackWeightUomCode xsdt.Integer `xml:"buyPackWeightUomCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_BuyPackWeightUomCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BuyPackWeightUomCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_BuyPackWeightUomCode instance.
func (me *XsdGoPkgHasElem_BuyPackWeightUomCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_BuyPackWeightUomCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_VendorPartNumber struct {
	VendorPartNumber xsdt.NCName `xml:"vendorPartNumber"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_VendorPartNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_VendorPartNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_VendorPartNumber instance.
func (me *XsdGoPkgHasElem_VendorPartNumber) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_VendorPartNumber; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_OriginalOrderQuantity struct {
	OriginalOrderQuantity xsdt.Decimal `xml:"originalOrderQuantity"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_OriginalOrderQuantity function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OriginalOrderQuantity instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OriginalOrderQuantity instance.
func (me *XsdGoPkgHasElem_OriginalOrderQuantity) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_OriginalOrderQuantity; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_BuyPackWeight struct {
	BuyPackWeight xsdt.Decimal `xml:"buyPackWeight"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_BuyPackWeight function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BuyPackWeight instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_BuyPackWeight instance.
func (me *XsdGoPkgHasElem_BuyPackWeight) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_BuyPackWeight; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_BuyPackVolume struct {
	BuyPackVolume xsdt.Decimal `xml:"buyPackVolume"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_BuyPackVolume function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BuyPackVolume instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_BuyPackVolume instance.
func (me *XsdGoPkgHasElem_BuyPackVolume) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_BuyPackVolume; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_OrderLineVersionNumber struct {
	OrderLineVersionNumber xsdt.Integer `xml:"orderLineVersionNumber"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_OrderLineVersionNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OrderLineVersionNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OrderLineVersionNumber instance.
func (me *XsdGoPkgHasElem_OrderLineVersionNumber) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_OrderLineVersionNumber; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_UnitRetailAmount struct {
	UnitRetailAmount xsdt.Decimal `xml:"unitRetailAmount"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_UnitRetailAmount function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_UnitRetailAmount instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_UnitRetailAmount instance.
func (me *XsdGoPkgHasElem_UnitRetailAmount) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_UnitRetailAmount; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_BuyPackSize struct {
	BuyPackSize xsdt.Decimal `xml:"buyPackSize"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_BuyPackSize function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BuyPackSize instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_BuyPackSize instance.
func (me *XsdGoPkgHasElem_BuyPackSize) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_BuyPackSize; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_BuyPackUoiCode struct {
	BuyPackUoiCode xsdt.Integer `xml:"buyPackUoiCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_BuyPackUoiCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BuyPackUoiCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_BuyPackUoiCode instance.
func (me *XsdGoPkgHasElem_BuyPackUoiCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_BuyPackUoiCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_OrderLineStatusCode struct {
	OrderLineStatusCode xsdt.Integer `xml:"orderLineStatusCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_OrderLineStatusCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OrderLineStatusCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OrderLineStatusCode instance.
func (me *XsdGoPkgHasElem_OrderLineStatusCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_OrderLineStatusCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_TotalShippedQuantity struct {
	TotalShippedQuantity xsdt.Decimal `xml:"totalShippedQuantity"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_TotalShippedQuantity function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TotalShippedQuantity instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TotalShippedQuantity instance.
func (me *XsdGoPkgHasElem_TotalShippedQuantity) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_TotalShippedQuantity; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_OnOrderNotShippedQuantity struct {
	OnOrderNotShippedQuantity xsdt.Decimal `xml:"onOrderNotShippedQuantity"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_OnOrderNotShippedQuantity function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OnOrderNotShippedQuantity instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OnOrderNotShippedQuantity instance.
func (me *XsdGoPkgHasElem_OnOrderNotShippedQuantity) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_OnOrderNotShippedQuantity; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_ReceivedQuantity struct {
	ReceivedQuantity xsdt.Decimal `xml:"receivedQuantity"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_ReceivedQuantity function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ReceivedQuantity instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ReceivedQuantity instance.
func (me *XsdGoPkgHasElem_ReceivedQuantity) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_ReceivedQuantity; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_UnitCostAmount struct {
	UnitCostAmount xsdt.Decimal `xml:"unitCostAmount"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_UnitCostAmount function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_UnitCostAmount instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_UnitCostAmount instance.
func (me *XsdGoPkgHasElem_UnitCostAmount) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_UnitCostAmount; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_LineUpdatedFlag struct {
	LineUpdatedFlag xsdt.Boolean `xml:"lineUpdatedFlag"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_LineUpdatedFlag function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LineUpdatedFlag instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_LineUpdatedFlag instance.
func (me *XsdGoPkgHasElem_LineUpdatedFlag) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_LineUpdatedFlag; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_UnitOfMeasureCode struct {
	UnitOfMeasureCode xsdt.NCName `xml:"unitOfMeasureCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_UnitOfMeasureCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_UnitOfMeasureCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_UnitOfMeasureCode instance.
func (me *XsdGoPkgHasElem_UnitOfMeasureCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_UnitOfMeasureCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_AdjustedOrderQuantity struct {
	AdjustedOrderQuantity xsdt.Decimal `xml:"adjustedOrderQuantity"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_AdjustedOrderQuantity function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AdjustedOrderQuantity instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AdjustedOrderQuantity instance.
func (me *XsdGoPkgHasElem_AdjustedOrderQuantity) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_AdjustedOrderQuantity; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_SkuNumber struct {
	SkuNumber xsdt.Integer `xml:"skuNumber"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_SkuNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SkuNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SkuNumber instance.
func (me *XsdGoPkgHasElem_SkuNumber) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_SkuNumber; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_SkuDescription struct {
	SkuDescription xsdt.String `xml:"skuDescription"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_SkuDescription function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SkuDescription instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SkuDescription instance.
func (me *XsdGoPkgHasElem_SkuDescription) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_SkuDescription; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_SkuShortDescription struct {
	SkuShortDescription xsdt.String `xml:"skuShortDescription"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_SkuShortDescription function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SkuShortDescription instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SkuShortDescription instance.
func (me *XsdGoPkgHasElem_SkuShortDescription) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_SkuShortDescription; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_InTransitQuantity struct {
	InTransitQuantity xsdt.Decimal `xml:"inTransitQuantity"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_InTransitQuantity function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_InTransitQuantity instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_InTransitQuantity instance.
func (me *XsdGoPkgHasElem_InTransitQuantity) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_InTransitQuantity; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_UniversalProductCode struct {
	UniversalProductCode xsdt.Integer `xml:"universalProductCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_UniversalProductCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_UniversalProductCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_UniversalProductCode instance.
func (me *XsdGoPkgHasElem_UniversalProductCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_UniversalProductCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_OrderLineNumber struct {
	OrderLineNumber xsdt.Integer `xml:"orderLineNumber"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_OrderLineNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OrderLineNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_OrderLineNumber instance.
func (me *XsdGoPkgHasElem_OrderLineNumber) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_OrderLineNumber; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type TxsdOrderLine struct {
	XsdGoPkgHasElem_OrderLineVersionNumber

	XsdGoPkgHasElem_VendorPartNumber

	XsdGoPkgHasElem_OriginalOrderQuantity

	XsdGoPkgHasElem_BuyPackWeight

	XsdGoPkgHasElem_BuyPackVolume

	XsdGoPkgHasElem_TotalShippedQuantity

	XsdGoPkgHasElem_OnOrderNotShippedQuantity

	XsdGoPkgHasElem_ReceivedQuantity

	XsdGoPkgHasElem_UnitCostAmount

	XsdGoPkgHasElem_UnitRetailAmount

	XsdGoPkgHasElem_BuyPackSize

	XsdGoPkgHasElem_BuyPackUoiCode

	XsdGoPkgHasElem_OrderLineStatusCode

	XsdGoPkgHasElem_UnitOfMeasureCode

	XsdGoPkgHasElem_LineUpdatedFlag

	XsdGoPkgHasElem_InTransitQuantity

	XsdGoPkgHasElem_UniversalProductCode

	XsdGoPkgHasElem_OrderLineNumber

	XsdGoPkgHasElem_AdjustedOrderQuantity

	XsdGoPkgHasElem_SkuNumber

	XsdGoPkgHasElem_SkuDescription

	XsdGoPkgHasElem_SkuShortDescription

	XsdGoPkgHasElem_BuyPackWeightUomCode

	XsdGoPkgHasElem_BuyPackVolumeUomCode

}

//	If the WalkHandlers.TxsdOrderLine function is not nil (ie. was set by outside code), calls it with this TxsdOrderLine instance as the single argument. Then calls the Walk() method on 24/24 embed(s) and 0/0 field(s) belonging to this TxsdOrderLine instance.
func (me *TxsdOrderLine) Walk () (err error) { 
	if fn := WalkHandlers.TxsdOrderLine; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.XsdGoPkgHasElem_SkuDescription.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_SkuShortDescription.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_InTransitQuantity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_UniversalProductCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_OrderLineNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_AdjustedOrderQuantity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_SkuNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_BuyPackWeightUomCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_BuyPackVolumeUomCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_BuyPackWeight.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_BuyPackVolume.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_OrderLineVersionNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_VendorPartNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_OriginalOrderQuantity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_BuyPackUoiCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_OrderLineStatusCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_TotalShippedQuantity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_OnOrderNotShippedQuantity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_ReceivedQuantity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_UnitCostAmount.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_UnitRetailAmount.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_BuyPackSize.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_UnitOfMeasureCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_LineUpdatedFlag.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_OrderLine struct {
	OrderLine *TxsdOrderLine `xml:"orderLine"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_OrderLine function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OrderLine instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_OrderLine instance.
func (me *XsdGoPkgHasElem_OrderLine) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_OrderLine; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.OrderLine.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type TxsdOrderLines struct {
	XsdGoPkgHasElem_OrderLine

}

//	If the WalkHandlers.TxsdOrderLines function is not nil (ie. was set by outside code), calls it with this TxsdOrderLines instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdOrderLines instance.
func (me *TxsdOrderLines) Walk () (err error) { 
	if fn := WalkHandlers.TxsdOrderLines; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.XsdGoPkgHasElem_OrderLine.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_OrderLines struct {
	OrderLines *TxsdOrderLines `xml:"orderLines"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_OrderLines function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OrderLines instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_OrderLines instance.
func (me *XsdGoPkgHasElem_OrderLines) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_OrderLines; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.OrderLines.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_TotalOrderVolumeUomCode struct {
	TotalOrderVolumeUomCode xsdt.Integer `xml:"totalOrderVolumeUomCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_TotalOrderVolumeUomCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TotalOrderVolumeUomCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TotalOrderVolumeUomCode instance.
func (me *XsdGoPkgHasElem_TotalOrderVolumeUomCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_TotalOrderVolumeUomCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_TotalOrderRetailAmount struct {
	TotalOrderRetailAmount xsdt.Decimal `xml:"totalOrderRetailAmount"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_TotalOrderRetailAmount function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TotalOrderRetailAmount instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TotalOrderRetailAmount instance.
func (me *XsdGoPkgHasElem_TotalOrderRetailAmount) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_TotalOrderRetailAmount; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_TotalOrderWeightUomCode struct {
	TotalOrderWeightUomCode xsdt.Integer `xml:"totalOrderWeightUomCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_TotalOrderWeightUomCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TotalOrderWeightUomCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TotalOrderWeightUomCode instance.
func (me *XsdGoPkgHasElem_TotalOrderWeightUomCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_TotalOrderWeightUomCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_TotalOrderVolume struct {
	TotalOrderVolume xsdt.Decimal `xml:"totalOrderVolume"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_TotalOrderVolume function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TotalOrderVolume instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TotalOrderVolume instance.
func (me *XsdGoPkgHasElem_TotalOrderVolume) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_TotalOrderVolume; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_TotalOrderWeight struct {
	TotalOrderWeight xsdt.Decimal `xml:"totalOrderWeight"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_TotalOrderWeight function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TotalOrderWeight instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TotalOrderWeight instance.
func (me *XsdGoPkgHasElem_TotalOrderWeight) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_TotalOrderWeight; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_TotalOrderQuantity struct {
	TotalOrderQuantity xsdt.Decimal `xml:"totalOrderQuantity"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_TotalOrderQuantity function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TotalOrderQuantity instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TotalOrderQuantity instance.
func (me *XsdGoPkgHasElem_TotalOrderQuantity) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_TotalOrderQuantity; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_TotalNumberOfDetailLines struct {
	TotalNumberOfDetailLines xsdt.Integer `xml:"totalNumberOfDetailLines"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_TotalNumberOfDetailLines function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TotalNumberOfDetailLines instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TotalNumberOfDetailLines instance.
func (me *XsdGoPkgHasElem_TotalNumberOfDetailLines) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_TotalNumberOfDetailLines; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_TotalNumberOfDiscounts struct {
	TotalNumberOfDiscounts xsdt.Integer `xml:"totalNumberOfDiscounts"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_TotalNumberOfDiscounts function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TotalNumberOfDiscounts instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TotalNumberOfDiscounts instance.
func (me *XsdGoPkgHasElem_TotalNumberOfDiscounts) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_TotalNumberOfDiscounts; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_TotalOrderCostAmount struct {
	TotalOrderCostAmount xsdt.Decimal `xml:"totalOrderCostAmount"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_TotalOrderCostAmount function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TotalOrderCostAmount instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TotalOrderCostAmount instance.
func (me *XsdGoPkgHasElem_TotalOrderCostAmount) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_TotalOrderCostAmount; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type TxsdOrderSummary struct {
	XsdGoPkgHasElem_TotalOrderRetailAmount

	XsdGoPkgHasElem_TotalOrderWeightUomCode

	XsdGoPkgHasElem_TotalOrderVolume

	XsdGoPkgHasElem_TotalOrderVolumeUomCode

	XsdGoPkgHasElem_TotalNumberOfDetailLines

	XsdGoPkgHasElem_TotalNumberOfDiscounts

	XsdGoPkgHasElem_TotalOrderCostAmount

	XsdGoPkgHasElem_TotalOrderWeight

	XsdGoPkgHasElem_TotalOrderQuantity

}

//	If the WalkHandlers.TxsdOrderSummary function is not nil (ie. was set by outside code), calls it with this TxsdOrderSummary instance as the single argument. Then calls the Walk() method on 9/9 embed(s) and 0/0 field(s) belonging to this TxsdOrderSummary instance.
func (me *TxsdOrderSummary) Walk () (err error) { 
	if fn := WalkHandlers.TxsdOrderSummary; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.XsdGoPkgHasElem_TotalNumberOfDetailLines.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_TotalNumberOfDiscounts.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_TotalOrderCostAmount.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_TotalOrderWeight.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_TotalOrderQuantity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_TotalOrderRetailAmount.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_TotalOrderWeightUomCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_TotalOrderVolume.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_TotalOrderVolumeUomCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_OrderSummary struct {
	OrderSummary *TxsdOrderSummary `xml:"orderSummary"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_OrderSummary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OrderSummary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_OrderSummary instance.
func (me *XsdGoPkgHasElem_OrderSummary) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_OrderSummary; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.OrderSummary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type TxsdOrderDetails struct {
	XsdGoPkgHasElem_OrderHeader

	XsdGoPkgHasElem_Discounts

	XsdGoPkgHasElem_OrderLines

	XsdGoPkgHasElem_OrderSummary

}

//	If the WalkHandlers.TxsdOrderDetails function is not nil (ie. was set by outside code), calls it with this TxsdOrderDetails instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdOrderDetails instance.
func (me *TxsdOrderDetails) Walk () (err error) { 
	if fn := WalkHandlers.TxsdOrderDetails; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.XsdGoPkgHasElem_OrderSummary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_OrderHeader.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_Discounts.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_OrderLines.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_OrderDetails struct {
	OrderDetails *TxsdOrderDetails `xml:"orderDetails"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_OrderDetails function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OrderDetails instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_OrderDetails instance.
func (me *XsdGoPkgHasElem_OrderDetails) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_OrderDetails; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.OrderDetails.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type TxsdOrderCanonical struct {
	XsdGoPkgHasElem_TransactionCode

	XsdGoPkgHasElem_CurrentTimestamp

	XsdGoPkgHasElem_OrderDetails

}

//	If the WalkHandlers.TxsdOrderCanonical function is not nil (ie. was set by outside code), calls it with this TxsdOrderCanonical instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdOrderCanonical instance.
func (me *TxsdOrderCanonical) Walk () (err error) { 
	if fn := WalkHandlers.TxsdOrderCanonical; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.XsdGoPkgHasElem_TransactionCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_CurrentTimestamp.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if err = me.XsdGoPkgHasElem_OrderDetails.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_OrderCanonical struct {
	OrderCanonical *TxsdOrderCanonical `xml:"orderCanonical"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_OrderCanonical function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OrderCanonical instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_OrderCanonical instance.
func (me *XsdGoPkgHasElem_OrderCanonical) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_OrderCanonical; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.OrderCanonical.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_OrderCanonical struct {
	OrderCanonicals []*TxsdOrderCanonical `xml:"orderCanonical"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_OrderCanonical function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OrderCanonical instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OrderCanonical instance.
func (me *XsdGoPkgHasElems_OrderCanonical) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_OrderCanonical; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		for _, x := range me.OrderCanonicals { if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_TransactionCode struct {
	TransactionCodes []xsdt.NCName `xml:"transactionCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_TransactionCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TransactionCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TransactionCode instance.
func (me *XsdGoPkgHasElems_TransactionCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_TransactionCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_CurrentTimestamp struct {
	CurrentTimestamps []xsdt.Nmtoken `xml:"currentTimestamp"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_CurrentTimestamp function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CurrentTimestamp instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CurrentTimestamp instance.
func (me *XsdGoPkgHasElems_CurrentTimestamp) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_CurrentTimestamp; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_OrderDetails struct {
	OrderDetailses []*TxsdOrderDetails `xml:"orderDetails"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_OrderDetails function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OrderDetails instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OrderDetails instance.
func (me *XsdGoPkgHasElems_OrderDetails) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_OrderDetails; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		for _, x := range me.OrderDetailses { if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_OrderHeader struct {
	OrderHeaders []*TxsdOrderHeader `xml:"orderHeader"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_OrderHeader function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OrderHeader instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OrderHeader instance.
func (me *XsdGoPkgHasElems_OrderHeader) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_OrderHeader; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		for _, x := range me.OrderHeaders { if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_ReceivingLocationNumber struct {
	ReceivingLocationNumbers []xsdt.Integer `xml:"receivingLocationNumber"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_ReceivingLocationNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ReceivingLocationNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ReceivingLocationNumber instance.
func (me *XsdGoPkgHasElems_ReceivingLocationNumber) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_ReceivingLocationNumber; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_ReceivingLocationTypeCode struct {
	ReceivingLocationTypeCodes []xsdt.NCName `xml:"receivingLocationTypeCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_ReceivingLocationTypeCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ReceivingLocationTypeCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ReceivingLocationTypeCode instance.
func (me *XsdGoPkgHasElems_ReceivingLocationTypeCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_ReceivingLocationTypeCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_MerchandisingVendorNumber struct {
	MerchandisingVendorNumbers []xsdt.Integer `xml:"merchandisingVendorNumber"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_MerchandisingVendorNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MerchandisingVendorNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MerchandisingVendorNumber instance.
func (me *XsdGoPkgHasElems_MerchandisingVendorNumber) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_MerchandisingVendorNumber; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_MerchandisingDepartmentNumber struct {
	MerchandisingDepartmentNumbers []xsdt.Integer `xml:"merchandisingDepartmentNumber"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_MerchandisingDepartmentNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MerchandisingDepartmentNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MerchandisingDepartmentNumber instance.
func (me *XsdGoPkgHasElems_MerchandisingDepartmentNumber) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_MerchandisingDepartmentNumber; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_DistributionServiceTypeCode struct {
	DistributionServiceTypeCodes []xsdt.Integer `xml:"distributionServiceTypeCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_DistributionServiceTypeCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DistributionServiceTypeCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DistributionServiceTypeCode instance.
func (me *XsdGoPkgHasElems_DistributionServiceTypeCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_DistributionServiceTypeCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_ReplenishmentMethodCode struct {
	ReplenishmentMethodCodes []xsdt.Integer `xml:"replenishmentMethodCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_ReplenishmentMethodCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ReplenishmentMethodCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ReplenishmentMethodCode instance.
func (me *XsdGoPkgHasElems_ReplenishmentMethodCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_ReplenishmentMethodCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_OrderReasonCode struct {
	OrderReasonCodes []xsdt.Integer `xml:"orderReasonCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_OrderReasonCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OrderReasonCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OrderReasonCode instance.
func (me *XsdGoPkgHasElems_OrderReasonCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_OrderReasonCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_OrderNumber struct {
	OrderNumbers []xsdt.Integer `xml:"orderNumber"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_OrderNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OrderNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OrderNumber instance.
func (me *XsdGoPkgHasElems_OrderNumber) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_OrderNumber; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_OrderClass struct {
	OrderClasses []xsdt.Integer `xml:"orderClass"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_OrderClass function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OrderClass instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OrderClass instance.
func (me *XsdGoPkgHasElems_OrderClass) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_OrderClass; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_OrderCreateDate struct {
	OrderCreateDates []xsdt.Nmtoken `xml:"orderCreateDate"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_OrderCreateDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OrderCreateDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OrderCreateDate instance.
func (me *XsdGoPkgHasElems_OrderCreateDate) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_OrderCreateDate; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_OrderCreateTimestamp struct {
	OrderCreateTimestamps []xsdt.Nmtoken `xml:"orderCreateTimestamp"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_OrderCreateTimestamp function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OrderCreateTimestamp instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OrderCreateTimestamp instance.
func (me *XsdGoPkgHasElems_OrderCreateTimestamp) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_OrderCreateTimestamp; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_LastUpdatedTimestamp struct {
	LastUpdatedTimestamps []xsdt.Nmtoken `xml:"lastUpdatedTimestamp"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_LastUpdatedTimestamp function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LastUpdatedTimestamp instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LastUpdatedTimestamp instance.
func (me *XsdGoPkgHasElems_LastUpdatedTimestamp) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_LastUpdatedTimestamp; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_ExpectedArrivalDate struct {
	ExpectedArrivalDates []xsdt.Nmtoken `xml:"expectedArrivalDate"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_ExpectedArrivalDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ExpectedArrivalDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ExpectedArrivalDate instance.
func (me *XsdGoPkgHasElems_ExpectedArrivalDate) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_ExpectedArrivalDate; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_EstimatedShipDate struct {
	EstimatedShipDates []xsdt.Nmtoken `xml:"estimatedShipDate"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_EstimatedShipDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EstimatedShipDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EstimatedShipDate instance.
func (me *XsdGoPkgHasElems_EstimatedShipDate) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_EstimatedShipDate; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_CancelEligibilityDate struct {
	CancelEligibilityDates []xsdt.Nmtoken `xml:"cancelEligibilityDate"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_CancelEligibilityDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CancelEligibilityDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CancelEligibilityDate instance.
func (me *XsdGoPkgHasElems_CancelEligibilityDate) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_CancelEligibilityDate; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_OmtOrderTypeCode struct {
	OmtOrderTypeCodes []xsdt.Integer `xml:"omtOrderTypeCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_OmtOrderTypeCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OmtOrderTypeCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OmtOrderTypeCode instance.
func (me *XsdGoPkgHasElems_OmtOrderTypeCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_OmtOrderTypeCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_AccountOrderTypeCode struct {
	AccountOrderTypeCodes []xsdt.Integer `xml:"accountOrderTypeCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_AccountOrderTypeCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AccountOrderTypeCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AccountOrderTypeCode instance.
func (me *XsdGoPkgHasElems_AccountOrderTypeCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_AccountOrderTypeCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_ProductOriginTypeCode struct {
	ProductOriginTypeCodes []xsdt.Integer `xml:"productOriginTypeCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_ProductOriginTypeCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ProductOriginTypeCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ProductOriginTypeCode instance.
func (me *XsdGoPkgHasElems_ProductOriginTypeCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_ProductOriginTypeCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_ProductDestinationTypeCode struct {
	ProductDestinationTypeCodes []xsdt.Integer `xml:"productDestinationTypeCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_ProductDestinationTypeCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ProductDestinationTypeCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ProductDestinationTypeCode instance.
func (me *XsdGoPkgHasElems_ProductDestinationTypeCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_ProductDestinationTypeCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_OrderRequestingSystemCode struct {
	OrderRequestingSystemCodes []xsdt.Integer `xml:"orderRequestingSystemCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_OrderRequestingSystemCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OrderRequestingSystemCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OrderRequestingSystemCode instance.
func (me *XsdGoPkgHasElems_OrderRequestingSystemCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_OrderRequestingSystemCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_PeggedOrderFlag struct {
	PeggedOrderFlags []xsdt.Boolean `xml:"peggedOrderFlag"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_PeggedOrderFlag function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PeggedOrderFlag instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PeggedOrderFlag instance.
func (me *XsdGoPkgHasElems_PeggedOrderFlag) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_PeggedOrderFlag; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_SpecialOrderFlag struct {
	SpecialOrderFlags []xsdt.Boolean `xml:"specialOrderFlag"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_SpecialOrderFlag function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SpecialOrderFlag instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SpecialOrderFlag instance.
func (me *XsdGoPkgHasElems_SpecialOrderFlag) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_SpecialOrderFlag; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_OrderHeaderVersionNumber struct {
	OrderHeaderVersionNumbers []xsdt.Integer `xml:"orderHeaderVersionNumber"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_OrderHeaderVersionNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OrderHeaderVersionNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OrderHeaderVersionNumber instance.
func (me *XsdGoPkgHasElems_OrderHeaderVersionNumber) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_OrderHeaderVersionNumber; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_OrderStatusCode struct {
	OrderStatusCodes []xsdt.Integer `xml:"orderStatusCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_OrderStatusCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OrderStatusCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OrderStatusCode instance.
func (me *XsdGoPkgHasElems_OrderStatusCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_OrderStatusCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_OrderOpenTimestamp struct {
	OrderOpenTimestamps []xsdt.Nmtoken `xml:"orderOpenTimestamp"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_OrderOpenTimestamp function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OrderOpenTimestamp instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OrderOpenTimestamp instance.
func (me *XsdGoPkgHasElems_OrderOpenTimestamp) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_OrderOpenTimestamp; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_OrderOpenSystemUserId struct {
	OrderOpenSystemUserIds []xsdt.NCName `xml:"orderOpenSystemUserId"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_OrderOpenSystemUserId function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OrderOpenSystemUserId instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OrderOpenSystemUserId instance.
func (me *XsdGoPkgHasElems_OrderOpenSystemUserId) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_OrderOpenSystemUserId; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_NewStoreFlag struct {
	NewStoreFlags []xsdt.Boolean `xml:"newStoreFlag"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_NewStoreFlag function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NewStoreFlag instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NewStoreFlag instance.
func (me *XsdGoPkgHasElems_NewStoreFlag) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_NewStoreFlag; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_ConsignmentFlag struct {
	ConsignmentFlags []xsdt.Boolean `xml:"consignmentFlag"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_ConsignmentFlag function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ConsignmentFlag instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ConsignmentFlag instance.
func (me *XsdGoPkgHasElems_ConsignmentFlag) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_ConsignmentFlag; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_CommentText struct {
	CommentTexts []xsdt.String `xml:"commentText"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_CommentText function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CommentText instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CommentText instance.
func (me *XsdGoPkgHasElems_CommentText) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_CommentText; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_SrcOrderRefId struct {
	SrcOrderRefIds []xsdt.Integer `xml:"srcOrderRefId"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_SrcOrderRefId function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SrcOrderRefId instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SrcOrderRefId instance.
func (me *XsdGoPkgHasElems_SrcOrderRefId) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_SrcOrderRefId; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_VendorCertifiedFlag struct {
	VendorCertifiedFlags []xsdt.Boolean `xml:"vendorCertifiedFlag"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_VendorCertifiedFlag function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_VendorCertifiedFlag instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_VendorCertifiedFlag instance.
func (me *XsdGoPkgHasElems_VendorCertifiedFlag) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_VendorCertifiedFlag; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_OrderTransmissionTypeCode struct {
	OrderTransmissionTypeCodes []xsdt.Integer `xml:"orderTransmissionTypeCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_OrderTransmissionTypeCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OrderTransmissionTypeCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OrderTransmissionTypeCode instance.
func (me *XsdGoPkgHasElems_OrderTransmissionTypeCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_OrderTransmissionTypeCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_StoreExceptionRequestFlag struct {
	StoreExceptionRequestFlags []xsdt.Boolean `xml:"storeExceptionRequestFlag"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_StoreExceptionRequestFlag function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StoreExceptionRequestFlag instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StoreExceptionRequestFlag instance.
func (me *XsdGoPkgHasElems_StoreExceptionRequestFlag) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_StoreExceptionRequestFlag; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_KeyrecTypeIndicator struct {
	KeyrecTypeIndicators []xsdt.NCName `xml:"keyrecTypeIndicator"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_KeyrecTypeIndicator function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_KeyrecTypeIndicator instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_KeyrecTypeIndicator instance.
func (me *XsdGoPkgHasElems_KeyrecTypeIndicator) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_KeyrecTypeIndicator; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_AddressDetail struct {
	AddressDetails []*TxsdAddressDetail `xml:"addressDetail"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_AddressDetail function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AddressDetail instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AddressDetail instance.
func (me *XsdGoPkgHasElems_AddressDetail) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_AddressDetail; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		for _, x := range me.AddressDetails { if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_AddressLine1 struct {
	AddressLine1s []xsdt.String `xml:"addressLine1"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_AddressLine1 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AddressLine1 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AddressLine1 instance.
func (me *XsdGoPkgHasElems_AddressLine1) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_AddressLine1; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_AddressLine2 struct {
	AddressLine2s []*TxsdAddressLine2 `xml:"addressLine2"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_AddressLine2 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AddressLine2 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AddressLine2 instance.
func (me *XsdGoPkgHasElems_AddressLine2) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_AddressLine2; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		for _, x := range me.AddressLine2s { if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_City struct {
	Cities []xsdt.String `xml:"city"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_City function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_City instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_City instance.
func (me *XsdGoPkgHasElems_City) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_City; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_StateCode struct {
	StateCodes []xsdt.NCName `xml:"stateCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_StateCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StateCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StateCode instance.
func (me *XsdGoPkgHasElems_StateCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_StateCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_ZipCode struct {
	ZipCodes []xsdt.Integer `xml:"zipCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_ZipCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ZipCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ZipCode instance.
func (me *XsdGoPkgHasElems_ZipCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_ZipCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_PaymentTermDetail struct {
	PaymentTermDetails []*TxsdPaymentTermDetail `xml:"paymentTermDetail"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_PaymentTermDetail function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PaymentTermDetail instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PaymentTermDetail instance.
func (me *XsdGoPkgHasElems_PaymentTermDetail) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_PaymentTermDetail; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		for _, x := range me.PaymentTermDetails { if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_PaymentTermTypeCode struct {
	PaymentTermTypeCodes []xsdt.NCName `xml:"paymentTermTypeCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_PaymentTermTypeCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PaymentTermTypeCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PaymentTermTypeCode instance.
func (me *XsdGoPkgHasElems_PaymentTermTypeCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_PaymentTermTypeCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_PaymentTermNumber struct {
	PaymentTermNumbers []xsdt.Integer `xml:"paymentTermNumber"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_PaymentTermNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PaymentTermNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PaymentTermNumber instance.
func (me *XsdGoPkgHasElems_PaymentTermNumber) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_PaymentTermNumber; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_PaymentTermDescription struct {
	PaymentTermDescriptions []xsdt.String `xml:"paymentTermDescription"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_PaymentTermDescription function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PaymentTermDescription instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PaymentTermDescription instance.
func (me *XsdGoPkgHasElems_PaymentTermDescription) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_PaymentTermDescription; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_StoreTermIdentifier struct {
	StoreTermIdentifiers []xsdt.Nmtoken `xml:"storeTermIdentifier"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_StoreTermIdentifier function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StoreTermIdentifier instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StoreTermIdentifier instance.
func (me *XsdGoPkgHasElems_StoreTermIdentifier) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_StoreTermIdentifier; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_BasisDateTypeCode struct {
	BasisDateTypeCodes []xsdt.NCName `xml:"basisDateTypeCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_BasisDateTypeCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BasisDateTypeCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BasisDateTypeCode instance.
func (me *XsdGoPkgHasElems_BasisDateTypeCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_BasisDateTypeCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_PaymentTermDiscountPercent struct {
	PaymentTermDiscountPercents []xsdt.Decimal `xml:"paymentTermDiscountPercent"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_PaymentTermDiscountPercent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PaymentTermDiscountPercent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PaymentTermDiscountPercent instance.
func (me *XsdGoPkgHasElems_PaymentTermDiscountPercent) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_PaymentTermDiscountPercent; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_HeaderUpdatedFlag struct {
	HeaderUpdatedFlags []xsdt.Boolean `xml:"headerUpdatedFlag"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_HeaderUpdatedFlag function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_HeaderUpdatedFlag instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_HeaderUpdatedFlag instance.
func (me *XsdGoPkgHasElems_HeaderUpdatedFlag) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_HeaderUpdatedFlag; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_FreightTermCode struct {
	FreightTermCodes []xsdt.NCName `xml:"freightTermCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_FreightTermCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FreightTermCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FreightTermCode instance.
func (me *XsdGoPkgHasElems_FreightTermCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_FreightTermCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_FreightOnboardCode struct {
	FreightOnboardCodes []xsdt.NCName `xml:"freightOnboardCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_FreightOnboardCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FreightOnboardCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FreightOnboardCode instance.
func (me *XsdGoPkgHasElems_FreightOnboardCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_FreightOnboardCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_TransactionPurposeCode struct {
	TransactionPurposeCodes []xsdt.Integer `xml:"transactionPurposeCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_TransactionPurposeCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TransactionPurposeCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TransactionPurposeCode instance.
func (me *XsdGoPkgHasElems_TransactionPurposeCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_TransactionPurposeCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_OrderTypeCode struct {
	OrderTypeCodes []xsdt.NCName `xml:"orderTypeCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_OrderTypeCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OrderTypeCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OrderTypeCode instance.
func (me *XsdGoPkgHasElems_OrderTypeCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_OrderTypeCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_DocumentTypeCode struct {
	DocumentTypeCodes []xsdt.NCName `xml:"documentTypeCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_DocumentTypeCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DocumentTypeCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DocumentTypeCode instance.
func (me *XsdGoPkgHasElems_DocumentTypeCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_DocumentTypeCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_LogId struct {
	LogIds []xsdt.Nmtoken `xml:"logId"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_LogId function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LogId instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LogId instance.
func (me *XsdGoPkgHasElems_LogId) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_LogId; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_CurrencyTypeCode struct {
	CurrencyTypeCodes []xsdt.NCName `xml:"currencyTypeCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_CurrencyTypeCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CurrencyTypeCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CurrencyTypeCode instance.
func (me *XsdGoPkgHasElems_CurrencyTypeCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_CurrencyTypeCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_Discounts struct {
	Discountses []*TxsdDiscounts `xml:"discounts"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_Discounts function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Discounts instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Discounts instance.
func (me *XsdGoPkgHasElems_Discounts) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_Discounts; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		for _, x := range me.Discountses { if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_Discount struct {
	Discount *TxsdDiscount `xml:"discount"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_Discount function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Discount instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Discount instance.
func (me *XsdGoPkgHasElem_Discount) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_Discount; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.Discount.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_DiscountTypeCode struct {
	DiscountTypeCodes []xsdt.NCName `xml:"discountTypeCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_DiscountTypeCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DiscountTypeCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DiscountTypeCode instance.
func (me *XsdGoPkgHasElems_DiscountTypeCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_DiscountTypeCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_DiscountPercent struct {
	DiscountPercents []xsdt.Decimal `xml:"discountPercent"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_DiscountPercent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DiscountPercent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DiscountPercent instance.
func (me *XsdGoPkgHasElems_DiscountPercent) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_DiscountPercent; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_SubDiscounts struct {
	SubDiscountses []*TxsdSubDiscounts `xml:"subDiscounts"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_SubDiscounts function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SubDiscounts instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SubDiscounts instance.
func (me *XsdGoPkgHasElems_SubDiscounts) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_SubDiscounts; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		for _, x := range me.SubDiscountses { if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElem_SubDiscount struct {
	SubDiscount *TxsdSubDiscount `xml:"subDiscount"`

}

//	If the WalkHandlers.XsdGoPkgHasElem_SubDiscount function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SubDiscount instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SubDiscount instance.
func (me *XsdGoPkgHasElem_SubDiscount) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElem_SubDiscount; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if err = me.SubDiscount.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_SubDiscountTypeCode struct {
	SubDiscountTypeCodes []xsdt.Integer `xml:"subDiscountTypeCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_SubDiscountTypeCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SubDiscountTypeCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SubDiscountTypeCode instance.
func (me *XsdGoPkgHasElems_SubDiscountTypeCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_SubDiscountTypeCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_SubDiscountPercent struct {
	SubDiscountPercents []xsdt.Decimal `xml:"subDiscountPercent"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_SubDiscountPercent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SubDiscountPercent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SubDiscountPercent instance.
func (me *XsdGoPkgHasElems_SubDiscountPercent) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_SubDiscountPercent; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_OrderLines struct {
	OrderLineses []*TxsdOrderLines `xml:"orderLines"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_OrderLines function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OrderLines instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OrderLines instance.
func (me *XsdGoPkgHasElems_OrderLines) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_OrderLines; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		for _, x := range me.OrderLineses { if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_OrderLine struct {
	OrderLines []*TxsdOrderLine `xml:"orderLine"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_OrderLine function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OrderLine instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OrderLine instance.
func (me *XsdGoPkgHasElems_OrderLine) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_OrderLine; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		for _, x := range me.OrderLines { if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_OrderLineNumber struct {
	OrderLineNumbers []xsdt.Integer `xml:"orderLineNumber"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_OrderLineNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OrderLineNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OrderLineNumber instance.
func (me *XsdGoPkgHasElems_OrderLineNumber) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_OrderLineNumber; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_OrderLineVersionNumber struct {
	OrderLineVersionNumbers []xsdt.Integer `xml:"orderLineVersionNumber"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_OrderLineVersionNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OrderLineVersionNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OrderLineVersionNumber instance.
func (me *XsdGoPkgHasElems_OrderLineVersionNumber) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_OrderLineVersionNumber; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_AdjustedOrderQuantity struct {
	AdjustedOrderQuantities []xsdt.Decimal `xml:"adjustedOrderQuantity"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_AdjustedOrderQuantity function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AdjustedOrderQuantity instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AdjustedOrderQuantity instance.
func (me *XsdGoPkgHasElems_AdjustedOrderQuantity) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_AdjustedOrderQuantity; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_UnitCostAmount struct {
	UnitCostAmounts []xsdt.Decimal `xml:"unitCostAmount"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_UnitCostAmount function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_UnitCostAmount instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_UnitCostAmount instance.
func (me *XsdGoPkgHasElems_UnitCostAmount) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_UnitCostAmount; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_UnitRetailAmount struct {
	UnitRetailAmounts []xsdt.Decimal `xml:"unitRetailAmount"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_UnitRetailAmount function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_UnitRetailAmount instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_UnitRetailAmount instance.
func (me *XsdGoPkgHasElems_UnitRetailAmount) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_UnitRetailAmount; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_SkuNumber struct {
	SkuNumbers []xsdt.Integer `xml:"skuNumber"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_SkuNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SkuNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SkuNumber instance.
func (me *XsdGoPkgHasElems_SkuNumber) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_SkuNumber; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_SkuDescription struct {
	SkuDescriptions []xsdt.String `xml:"skuDescription"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_SkuDescription function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SkuDescription instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SkuDescription instance.
func (me *XsdGoPkgHasElems_SkuDescription) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_SkuDescription; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_SkuShortDescription struct {
	SkuShortDescriptions []xsdt.String `xml:"skuShortDescription"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_SkuShortDescription function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SkuShortDescription instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SkuShortDescription instance.
func (me *XsdGoPkgHasElems_SkuShortDescription) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_SkuShortDescription; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_BuyPackSize struct {
	BuyPackSizes []xsdt.Decimal `xml:"buyPackSize"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_BuyPackSize function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BuyPackSize instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BuyPackSize instance.
func (me *XsdGoPkgHasElems_BuyPackSize) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_BuyPackSize; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_BuyPackUoiCode struct {
	BuyPackUoiCodes []xsdt.Integer `xml:"buyPackUoiCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_BuyPackUoiCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BuyPackUoiCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BuyPackUoiCode instance.
func (me *XsdGoPkgHasElems_BuyPackUoiCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_BuyPackUoiCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_VendorPartNumber struct {
	VendorPartNumbers []xsdt.NCName `xml:"vendorPartNumber"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_VendorPartNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_VendorPartNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_VendorPartNumber instance.
func (me *XsdGoPkgHasElems_VendorPartNumber) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_VendorPartNumber; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_OrderLineStatusCode struct {
	OrderLineStatusCodes []xsdt.Integer `xml:"orderLineStatusCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_OrderLineStatusCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OrderLineStatusCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OrderLineStatusCode instance.
func (me *XsdGoPkgHasElems_OrderLineStatusCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_OrderLineStatusCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_InTransitQuantity struct {
	InTransitQuantities []xsdt.Decimal `xml:"inTransitQuantity"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_InTransitQuantity function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_InTransitQuantity instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_InTransitQuantity instance.
func (me *XsdGoPkgHasElems_InTransitQuantity) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_InTransitQuantity; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_OriginalOrderQuantity struct {
	OriginalOrderQuantities []xsdt.Decimal `xml:"originalOrderQuantity"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_OriginalOrderQuantity function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OriginalOrderQuantity instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OriginalOrderQuantity instance.
func (me *XsdGoPkgHasElems_OriginalOrderQuantity) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_OriginalOrderQuantity; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_TotalShippedQuantity struct {
	TotalShippedQuantities []xsdt.Decimal `xml:"totalShippedQuantity"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_TotalShippedQuantity function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TotalShippedQuantity instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TotalShippedQuantity instance.
func (me *XsdGoPkgHasElems_TotalShippedQuantity) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_TotalShippedQuantity; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_OnOrderNotShippedQuantity struct {
	OnOrderNotShippedQuantities []xsdt.Decimal `xml:"onOrderNotShippedQuantity"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_OnOrderNotShippedQuantity function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OnOrderNotShippedQuantity instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OnOrderNotShippedQuantity instance.
func (me *XsdGoPkgHasElems_OnOrderNotShippedQuantity) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_OnOrderNotShippedQuantity; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_ReceivedQuantity struct {
	ReceivedQuantities []xsdt.Decimal `xml:"receivedQuantity"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_ReceivedQuantity function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ReceivedQuantity instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ReceivedQuantity instance.
func (me *XsdGoPkgHasElems_ReceivedQuantity) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_ReceivedQuantity; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_BuyPackWeight struct {
	BuyPackWeights []xsdt.Decimal `xml:"buyPackWeight"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_BuyPackWeight function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BuyPackWeight instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BuyPackWeight instance.
func (me *XsdGoPkgHasElems_BuyPackWeight) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_BuyPackWeight; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_BuyPackWeightUomCode struct {
	BuyPackWeightUomCodes []xsdt.Integer `xml:"buyPackWeightUomCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_BuyPackWeightUomCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BuyPackWeightUomCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BuyPackWeightUomCode instance.
func (me *XsdGoPkgHasElems_BuyPackWeightUomCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_BuyPackWeightUomCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_BuyPackVolume struct {
	BuyPackVolumes []xsdt.Decimal `xml:"buyPackVolume"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_BuyPackVolume function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BuyPackVolume instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BuyPackVolume instance.
func (me *XsdGoPkgHasElems_BuyPackVolume) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_BuyPackVolume; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_BuyPackVolumeUomCode struct {
	BuyPackVolumeUomCodes []xsdt.Integer `xml:"buyPackVolumeUomCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_BuyPackVolumeUomCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BuyPackVolumeUomCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BuyPackVolumeUomCode instance.
func (me *XsdGoPkgHasElems_BuyPackVolumeUomCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_BuyPackVolumeUomCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_UnitOfMeasureCode struct {
	UnitOfMeasureCodes []xsdt.NCName `xml:"unitOfMeasureCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_UnitOfMeasureCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_UnitOfMeasureCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_UnitOfMeasureCode instance.
func (me *XsdGoPkgHasElems_UnitOfMeasureCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_UnitOfMeasureCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_UniversalProductCode struct {
	UniversalProductCodes []xsdt.Integer `xml:"universalProductCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_UniversalProductCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_UniversalProductCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_UniversalProductCode instance.
func (me *XsdGoPkgHasElems_UniversalProductCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_UniversalProductCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_LineUpdatedFlag struct {
	LineUpdatedFlags []xsdt.Boolean `xml:"lineUpdatedFlag"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_LineUpdatedFlag function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LineUpdatedFlag instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LineUpdatedFlag instance.
func (me *XsdGoPkgHasElems_LineUpdatedFlag) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_LineUpdatedFlag; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_OrderSummary struct {
	OrderSummaries []*TxsdOrderSummary `xml:"orderSummary"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_OrderSummary function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OrderSummary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OrderSummary instance.
func (me *XsdGoPkgHasElems_OrderSummary) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_OrderSummary; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		for _, x := range me.OrderSummaries { if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_TotalNumberOfDetailLines struct {
	TotalNumberOfDetailLineses []xsdt.Integer `xml:"totalNumberOfDetailLines"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_TotalNumberOfDetailLines function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TotalNumberOfDetailLines instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TotalNumberOfDetailLines instance.
func (me *XsdGoPkgHasElems_TotalNumberOfDetailLines) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_TotalNumberOfDetailLines; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_TotalNumberOfDiscounts struct {
	TotalNumberOfDiscountses []xsdt.Integer `xml:"totalNumberOfDiscounts"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_TotalNumberOfDiscounts function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TotalNumberOfDiscounts instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TotalNumberOfDiscounts instance.
func (me *XsdGoPkgHasElems_TotalNumberOfDiscounts) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_TotalNumberOfDiscounts; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_TotalOrderRetailAmount struct {
	TotalOrderRetailAmounts []xsdt.Decimal `xml:"totalOrderRetailAmount"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_TotalOrderRetailAmount function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TotalOrderRetailAmount instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TotalOrderRetailAmount instance.
func (me *XsdGoPkgHasElems_TotalOrderRetailAmount) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_TotalOrderRetailAmount; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_TotalOrderCostAmount struct {
	TotalOrderCostAmounts []xsdt.Decimal `xml:"totalOrderCostAmount"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_TotalOrderCostAmount function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TotalOrderCostAmount instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TotalOrderCostAmount instance.
func (me *XsdGoPkgHasElems_TotalOrderCostAmount) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_TotalOrderCostAmount; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_TotalOrderWeight struct {
	TotalOrderWeights []xsdt.Decimal `xml:"totalOrderWeight"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_TotalOrderWeight function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TotalOrderWeight instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TotalOrderWeight instance.
func (me *XsdGoPkgHasElems_TotalOrderWeight) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_TotalOrderWeight; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_TotalOrderWeightUomCode struct {
	TotalOrderWeightUomCodes []xsdt.Integer `xml:"totalOrderWeightUomCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_TotalOrderWeightUomCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TotalOrderWeightUomCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TotalOrderWeightUomCode instance.
func (me *XsdGoPkgHasElems_TotalOrderWeightUomCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_TotalOrderWeightUomCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_TotalOrderVolume struct {
	TotalOrderVolumes []xsdt.Decimal `xml:"totalOrderVolume"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_TotalOrderVolume function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TotalOrderVolume instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TotalOrderVolume instance.
func (me *XsdGoPkgHasElems_TotalOrderVolume) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_TotalOrderVolume; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_TotalOrderVolumeUomCode struct {
	TotalOrderVolumeUomCodes []xsdt.Integer `xml:"totalOrderVolumeUomCode"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_TotalOrderVolumeUomCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TotalOrderVolumeUomCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TotalOrderVolumeUomCode instance.
func (me *XsdGoPkgHasElems_TotalOrderVolumeUomCode) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_TotalOrderVolumeUomCode; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasElems_TotalOrderQuantity struct {
	TotalOrderQuantities []xsdt.Decimal `xml:"totalOrderQuantity"`

}

//	If the WalkHandlers.XsdGoPkgHasElems_TotalOrderQuantity function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TotalOrderQuantity instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TotalOrderQuantity instance.
func (me *XsdGoPkgHasElems_TotalOrderQuantity) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasElems_TotalOrderQuantity; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`

}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk () (err error) { 
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil { if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
		if fn != nil { if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) { return } }
}
	return
 }

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors          []error
	//	Your custom error-handling function, if required.
	WalkOnError         func(error)
	//	Provides 222 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers        = &XsdGoPkgWalkHandlers {}
)

//	Provides 222 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	XsdGoPkgHasElem_KeyrecTypeIndicator func (*XsdGoPkgHasElem_KeyrecTypeIndicator, bool) (error)
	XsdGoPkgHasElems_NewStoreFlag func (*XsdGoPkgHasElems_NewStoreFlag, bool) (error)
	XsdGoPkgHasElem_CurrentTimestamp func (*XsdGoPkgHasElem_CurrentTimestamp, bool) (error)
	TxsdDiscounts func (*TxsdDiscounts, bool) (error)
	XsdGoPkgHasElems_City func (*XsdGoPkgHasElems_City, bool) (error)
	XsdGoPkgHasElem_OrderNumber func (*XsdGoPkgHasElem_OrderNumber, bool) (error)
	XsdGoPkgHasElem_InTransitQuantity func (*XsdGoPkgHasElem_InTransitQuantity, bool) (error)
	XsdGoPkgHasElem_ReceivingLocationTypeCode func (*XsdGoPkgHasElem_ReceivingLocationTypeCode, bool) (error)
	XsdGoPkgHasElems_SubDiscount func (*XsdGoPkgHasElems_SubDiscount, bool) (error)
	XsdGoPkgHasElem_OrderLineStatusCode func (*XsdGoPkgHasElem_OrderLineStatusCode, bool) (error)
	XsdGoPkgHasElems_UnitCostAmount func (*XsdGoPkgHasElems_UnitCostAmount, bool) (error)
	XsdGoPkgHasElem_ReceivingLocationNumber func (*XsdGoPkgHasElem_ReceivingLocationNumber, bool) (error)
	XsdGoPkgHasElem_CommentText func (*XsdGoPkgHasElem_CommentText, bool) (error)
	XsdGoPkgHasElem_BuyPackUoiCode func (*XsdGoPkgHasElem_BuyPackUoiCode, bool) (error)
	XsdGoPkgHasElem_ReceivedQuantity func (*XsdGoPkgHasElem_ReceivedQuantity, bool) (error)
	XsdGoPkgHasElems_ReceivedQuantity func (*XsdGoPkgHasElems_ReceivedQuantity, bool) (error)
	XsdGoPkgHasElems_TotalOrderVolume func (*XsdGoPkgHasElems_TotalOrderVolume, bool) (error)
	XsdGoPkgHasElem_StateCode func (*XsdGoPkgHasElem_StateCode, bool) (error)
	TxsdSubDiscounts func (*TxsdSubDiscounts, bool) (error)
	XsdGoPkgHasElem_OrderSummary func (*XsdGoPkgHasElem_OrderSummary, bool) (error)
	XsdGoPkgHasElems_AddressDetail func (*XsdGoPkgHasElems_AddressDetail, bool) (error)
	XsdGoPkgHasElems_TotalOrderWeight func (*XsdGoPkgHasElems_TotalOrderWeight, bool) (error)
	XsdGoPkgHasElem_ConsignmentFlag func (*XsdGoPkgHasElem_ConsignmentFlag, bool) (error)
	XsdGoPkgHasElem_OrderOpenSystemUserId func (*XsdGoPkgHasElem_OrderOpenSystemUserId, bool) (error)
	XsdGoPkgHasElem_LineUpdatedFlag func (*XsdGoPkgHasElem_LineUpdatedFlag, bool) (error)
	XsdGoPkgHasElem_TotalNumberOfDetailLines func (*XsdGoPkgHasElem_TotalNumberOfDetailLines, bool) (error)
	XsdGoPkgHasElems_ReceivingLocationNumber func (*XsdGoPkgHasElems_ReceivingLocationNumber, bool) (error)
	XsdGoPkgHasElems_PaymentTermTypeCode func (*XsdGoPkgHasElems_PaymentTermTypeCode, bool) (error)
	XsdGoPkgHasElem_SubDiscounts func (*XsdGoPkgHasElem_SubDiscounts, bool) (error)
	XsdGoPkgHasElem_LastUpdatedTimestamp func (*XsdGoPkgHasElem_LastUpdatedTimestamp, bool) (error)
	XsdGoPkgHasElem_UnitOfMeasureCode func (*XsdGoPkgHasElem_UnitOfMeasureCode, bool) (error)
	TxsdOrderLines func (*TxsdOrderLines, bool) (error)
	XsdGoPkgHasElem_TotalOrderRetailAmount func (*XsdGoPkgHasElem_TotalOrderRetailAmount, bool) (error)
	XsdGoPkgHasElems_ExpectedArrivalDate func (*XsdGoPkgHasElems_ExpectedArrivalDate, bool) (error)
	XsdGoPkgHasElem_TransactionCode func (*XsdGoPkgHasElem_TransactionCode, bool) (error)
	XsdGoPkgHasElem_SpecialOrderFlag func (*XsdGoPkgHasElem_SpecialOrderFlag, bool) (error)
	XsdGoPkgHasElem_PeggedOrderFlag func (*XsdGoPkgHasElem_PeggedOrderFlag, bool) (error)
	XsdGoPkgHasElem_MerchandisingVendorNumber func (*XsdGoPkgHasElem_MerchandisingVendorNumber, bool) (error)
	XsdGoPkgHasElems_TransactionPurposeCode func (*XsdGoPkgHasElems_TransactionPurposeCode, bool) (error)
	XsdGoPkgHasElems_OrderCreateTimestamp func (*XsdGoPkgHasElems_OrderCreateTimestamp, bool) (error)
	XsdGoPkgHasElems_TotalShippedQuantity func (*XsdGoPkgHasElems_TotalShippedQuantity, bool) (error)
	XsdGoPkgHasElem_NewStoreFlag func (*XsdGoPkgHasElem_NewStoreFlag, bool) (error)
	XsdGoPkgHasElems_SkuDescription func (*XsdGoPkgHasElems_SkuDescription, bool) (error)
	XsdGoPkgHasElem_EstimatedShipDate func (*XsdGoPkgHasElem_EstimatedShipDate, bool) (error)
	XsdGoPkgHasElem_AddressLine1 func (*XsdGoPkgHasElem_AddressLine1, bool) (error)
	XsdGoPkgHasElems_OrderRequestingSystemCode func (*XsdGoPkgHasElems_OrderRequestingSystemCode, bool) (error)
	XsdGoPkgHasElem_Discount func (*XsdGoPkgHasElem_Discount, bool) (error)
	XsdGoPkgHasElems_BuyPackWeight func (*XsdGoPkgHasElems_BuyPackWeight, bool) (error)
	XsdGoPkgHasElems_SubDiscountTypeCode func (*XsdGoPkgHasElems_SubDiscountTypeCode, bool) (error)
	XsdGoPkgHasElem_TransactionPurposeCode func (*XsdGoPkgHasElem_TransactionPurposeCode, bool) (error)
	XsdGoPkgHasElem_BuyPackWeightUomCode func (*XsdGoPkgHasElem_BuyPackWeightUomCode, bool) (error)
	XsdGoPkgHasElem_TotalOrderWeight func (*XsdGoPkgHasElem_TotalOrderWeight, bool) (error)
	XsdGoPkgHasElem_OrderDetails func (*XsdGoPkgHasElem_OrderDetails, bool) (error)
	XsdGoPkgHasElems_SubDiscounts func (*XsdGoPkgHasElems_SubDiscounts, bool) (error)
	XsdGoPkgHasElems_VendorPartNumber func (*XsdGoPkgHasElems_VendorPartNumber, bool) (error)
	XsdGoPkgHasElem_StoreTermIdentifier func (*XsdGoPkgHasElem_StoreTermIdentifier, bool) (error)
	TxsdAddressDetail func (*TxsdAddressDetail, bool) (error)
	XsdGoPkgHasElems_MerchandisingDepartmentNumber func (*XsdGoPkgHasElems_MerchandisingDepartmentNumber, bool) (error)
	XsdGoPkgHasElems_OmtOrderTypeCode func (*XsdGoPkgHasElems_OmtOrderTypeCode, bool) (error)
	XsdGoPkgHasElems_OrderLine func (*XsdGoPkgHasElems_OrderLine, bool) (error)
	XsdGoPkgHasElems_TotalOrderCostAmount func (*XsdGoPkgHasElems_TotalOrderCostAmount, bool) (error)
	XsdGoPkgHasElem_AddressDetail func (*XsdGoPkgHasElem_AddressDetail, bool) (error)
	XsdGoPkgHasElems_OrderCanonical func (*XsdGoPkgHasElems_OrderCanonical, bool) (error)
	XsdGoPkgHasElems_ProductDestinationTypeCode func (*XsdGoPkgHasElems_ProductDestinationTypeCode, bool) (error)
	XsdGoPkgHasElems_BuyPackVolumeUomCode func (*XsdGoPkgHasElems_BuyPackVolumeUomCode, bool) (error)
	TxsdOrderLine func (*TxsdOrderLine, bool) (error)
	XsdGoPkgHasElems_ReceivingLocationTypeCode func (*XsdGoPkgHasElems_ReceivingLocationTypeCode, bool) (error)
	XsdGoPkgHasElems_TotalOrderVolumeUomCode func (*XsdGoPkgHasElems_TotalOrderVolumeUomCode, bool) (error)
	XsdGoPkgHasElem_SubDiscountTypeCode func (*XsdGoPkgHasElem_SubDiscountTypeCode, bool) (error)
	XsdGoPkgHasElem_OrderLines func (*XsdGoPkgHasElem_OrderLines, bool) (error)
	XsdGoPkgHasElems_ProductOriginTypeCode func (*XsdGoPkgHasElems_ProductOriginTypeCode, bool) (error)
	XsdGoPkgHasElems_AdjustedOrderQuantity func (*XsdGoPkgHasElems_AdjustedOrderQuantity, bool) (error)
	XsdGoPkgHasElem_HeaderUpdatedFlag func (*XsdGoPkgHasElem_HeaderUpdatedFlag, bool) (error)
	XsdGoPkgHasElem_OrderLineVersionNumber func (*XsdGoPkgHasElem_OrderLineVersionNumber, bool) (error)
	XsdGoPkgHasElem_UnitCostAmount func (*XsdGoPkgHasElem_UnitCostAmount, bool) (error)
	XsdGoPkgHasElem_TotalOrderQuantity func (*XsdGoPkgHasElem_TotalOrderQuantity, bool) (error)
	XsdGoPkgHasElems_OrderNumber func (*XsdGoPkgHasElems_OrderNumber, bool) (error)
	TxsdOrderDetails func (*TxsdOrderDetails, bool) (error)
	XsdGoPkgHasElems_KeyrecTypeIndicator func (*XsdGoPkgHasElems_KeyrecTypeIndicator, bool) (error)
	XsdGoPkgHasElem_CancelEligibilityDate func (*XsdGoPkgHasElem_CancelEligibilityDate, bool) (error)
	XsdGoPkgHasElem_City func (*XsdGoPkgHasElem_City, bool) (error)
	XsdGoPkgHasElems_FreightTermCode func (*XsdGoPkgHasElems_FreightTermCode, bool) (error)
	XsdGoPkgHasElems_LogId func (*XsdGoPkgHasElems_LogId, bool) (error)
	XsdGoPkgHasElems_OnOrderNotShippedQuantity func (*XsdGoPkgHasElems_OnOrderNotShippedQuantity, bool) (error)
	XsdGoPkgHasElems_Discount func (*XsdGoPkgHasElems_Discount, bool) (error)
	XsdGoPkgHasElem_AccountOrderTypeCode func (*XsdGoPkgHasElem_AccountOrderTypeCode, bool) (error)
	XsdGoPkgHasElem_OrderTransmissionTypeCode func (*XsdGoPkgHasElem_OrderTransmissionTypeCode, bool) (error)
	XsdGoPkgHasElem_MerchandisingDepartmentNumber func (*XsdGoPkgHasElem_MerchandisingDepartmentNumber, bool) (error)
	XsdGoPkgHasElem_OrderTypeCode func (*XsdGoPkgHasElem_OrderTypeCode, bool) (error)
	XsdGoPkgHasElems_HeaderUpdatedFlag func (*XsdGoPkgHasElems_HeaderUpdatedFlag, bool) (error)
	XsdGoPkgHasElem_LogId func (*XsdGoPkgHasElem_LogId, bool) (error)
	XsdGoPkgHasElem_OrderReasonCode func (*XsdGoPkgHasElem_OrderReasonCode, bool) (error)
	XsdGoPkgHasElem_BuyPackVolumeUomCode func (*XsdGoPkgHasElem_BuyPackVolumeUomCode, bool) (error)
	XsdGoPkgHasElems_OrderOpenTimestamp func (*XsdGoPkgHasElems_OrderOpenTimestamp, bool) (error)
	XsdGoPkgHasElems_OrderLineNumber func (*XsdGoPkgHasElems_OrderLineNumber, bool) (error)
	XsdGoPkgHasElem_OrderHeaderVersionNumber func (*XsdGoPkgHasElem_OrderHeaderVersionNumber, bool) (error)
	XsdGoPkgHasElem_TotalOrderWeightUomCode func (*XsdGoPkgHasElem_TotalOrderWeightUomCode, bool) (error)
	XsdGoPkgHasElem_OrderCanonical func (*XsdGoPkgHasElem_OrderCanonical, bool) (error)
	XsdGoPkgHasElems_OrderTypeCode func (*XsdGoPkgHasElems_OrderTypeCode, bool) (error)
	XsdGoPkgHasElems_UnitRetailAmount func (*XsdGoPkgHasElems_UnitRetailAmount, bool) (error)
	XsdGoPkgHasElems_TotalOrderWeightUomCode func (*XsdGoPkgHasElems_TotalOrderWeightUomCode, bool) (error)
	XsdGoPkgHasElems_PaymentTermDiscountPercent func (*XsdGoPkgHasElems_PaymentTermDiscountPercent, bool) (error)
	XsdGoPkgHasElem_OrderStatusCode func (*XsdGoPkgHasElem_OrderStatusCode, bool) (error)
	TxsdOrderSummary func (*TxsdOrderSummary, bool) (error)
	XsdGoPkgHasElem_UniversalProductCode func (*XsdGoPkgHasElem_UniversalProductCode, bool) (error)
	XsdGoPkgHasElems_AddressLine1 func (*XsdGoPkgHasElems_AddressLine1, bool) (error)
	XsdGoPkgHasElem_CurrencyTypeCode func (*XsdGoPkgHasElem_CurrencyTypeCode, bool) (error)
	XsdGoPkgHasElems_EstimatedShipDate func (*XsdGoPkgHasElems_EstimatedShipDate, bool) (error)
	XsdGoPkgHasElems_StateCode func (*XsdGoPkgHasElems_StateCode, bool) (error)
	XsdGoPkgHasElems_SkuShortDescription func (*XsdGoPkgHasElems_SkuShortDescription, bool) (error)
	XsdGoPkgHasElem_VendorPartNumber func (*XsdGoPkgHasElem_VendorPartNumber, bool) (error)
	XsdGoPkgHasElems_TransactionCode func (*XsdGoPkgHasElems_TransactionCode, bool) (error)
	XsdGoPkgHasElem_BasisDateTypeCode func (*XsdGoPkgHasElem_BasisDateTypeCode, bool) (error)
	XsdGoPkgHasElem_AddressLine2 func (*XsdGoPkgHasElem_AddressLine2, bool) (error)
	XsdGoPkgHasElem_DiscountPercent func (*XsdGoPkgHasElem_DiscountPercent, bool) (error)
	XsdGoPkgHasElems_PaymentTermDescription func (*XsdGoPkgHasElems_PaymentTermDescription, bool) (error)
	XsdGoPkgHasElems_TotalNumberOfDiscounts func (*XsdGoPkgHasElems_TotalNumberOfDiscounts, bool) (error)
	XsdGoPkgHasElem_PaymentTermDetail func (*XsdGoPkgHasElem_PaymentTermDetail, bool) (error)
	TxsdOrderHeader func (*TxsdOrderHeader, bool) (error)
	XsdGoPkgHasElem_OriginalOrderQuantity func (*XsdGoPkgHasElem_OriginalOrderQuantity, bool) (error)
	XsdGoPkgHasElems_CommentText func (*XsdGoPkgHasElems_CommentText, bool) (error)
	XsdGoPkgHasElems_StoreExceptionRequestFlag func (*XsdGoPkgHasElems_StoreExceptionRequestFlag, bool) (error)
	XsdGoPkgHasElem_BuyPackSize func (*XsdGoPkgHasElem_BuyPackSize, bool) (error)
	XsdGoPkgHasElems_PeggedOrderFlag func (*XsdGoPkgHasElems_PeggedOrderFlag, bool) (error)
	XsdGoPkgHasElems_OriginalOrderQuantity func (*XsdGoPkgHasElems_OriginalOrderQuantity, bool) (error)
	XsdGoPkgHasElems_TotalOrderRetailAmount func (*XsdGoPkgHasElems_TotalOrderRetailAmount, bool) (error)
	XsdGoPkgHasElem_PaymentTermDescription func (*XsdGoPkgHasElem_PaymentTermDescription, bool) (error)
	XsdGoPkgHasElem_TotalNumberOfDiscounts func (*XsdGoPkgHasElem_TotalNumberOfDiscounts, bool) (error)
	XsdGoPkgHasElems_CancelEligibilityDate func (*XsdGoPkgHasElems_CancelEligibilityDate, bool) (error)
	XsdGoPkgHasElems_BuyPackUoiCode func (*XsdGoPkgHasElems_BuyPackUoiCode, bool) (error)
	XsdGoPkgHasElem_ReplenishmentMethodCode func (*XsdGoPkgHasElem_ReplenishmentMethodCode, bool) (error)
	XsdGoPkgHasElem_UnitRetailAmount func (*XsdGoPkgHasElem_UnitRetailAmount, bool) (error)
	TxsdPaymentTermDetail func (*TxsdPaymentTermDetail, bool) (error)
	XsdGoPkgHasElem_OrderCreateDate func (*XsdGoPkgHasElem_OrderCreateDate, bool) (error)
	XsdGoPkgHasElem_OrderLine func (*XsdGoPkgHasElem_OrderLine, bool) (error)
	XsdGoPkgHasElem_TotalOrderCostAmount func (*XsdGoPkgHasElem_TotalOrderCostAmount, bool) (error)
	XsdGoPkgHasElems_LastUpdatedTimestamp func (*XsdGoPkgHasElems_LastUpdatedTimestamp, bool) (error)
	XsdGoPkgHasElems_VendorCertifiedFlag func (*XsdGoPkgHasElems_VendorCertifiedFlag, bool) (error)
	XsdGoPkgHasElems_OrderLines func (*XsdGoPkgHasElems_OrderLines, bool) (error)
	XsdGoPkgHasElem_PaymentTermDiscountPercent func (*XsdGoPkgHasElem_PaymentTermDiscountPercent, bool) (error)
	XsdGoPkgHasElems_OrderTransmissionTypeCode func (*XsdGoPkgHasElems_OrderTransmissionTypeCode, bool) (error)
	XsdGoPkgHasElem_Discounts func (*XsdGoPkgHasElem_Discounts, bool) (error)
	XsdGoPkgHasElem_TotalOrderVolume func (*XsdGoPkgHasElem_TotalOrderVolume, bool) (error)
	XsdGoPkgHasElems_CurrentTimestamp func (*XsdGoPkgHasElems_CurrentTimestamp, bool) (error)
	XsdGoPkgHasElems_Discounts func (*XsdGoPkgHasElems_Discounts, bool) (error)
	TxsdAddressLine2 func (*TxsdAddressLine2, bool) (error)
	XsdGoPkgHasElem_OrderHeader func (*XsdGoPkgHasElem_OrderHeader, bool) (error)
	XsdGoPkgHasElem_OrderLineNumber func (*XsdGoPkgHasElem_OrderLineNumber, bool) (error)
	XsdGoPkgHasElems_SubDiscountPercent func (*XsdGoPkgHasElems_SubDiscountPercent, bool) (error)
	XsdGoPkgHasElems_OrderSummary func (*XsdGoPkgHasElems_OrderSummary, bool) (error)
	TxsdDiscount func (*TxsdDiscount, bool) (error)
	XsdGoPkgHasElems_DocumentTypeCode func (*XsdGoPkgHasElems_DocumentTypeCode, bool) (error)
	XsdGoPkgHasElems_CurrencyTypeCode func (*XsdGoPkgHasElems_CurrencyTypeCode, bool) (error)
	XsdGoPkgHasElem_ProductDestinationTypeCode func (*XsdGoPkgHasElem_ProductDestinationTypeCode, bool) (error)
	XsdGoPkgHasElems_StoreTermIdentifier func (*XsdGoPkgHasElems_StoreTermIdentifier, bool) (error)
	XsdGoPkgHasElem_DistributionServiceTypeCode func (*XsdGoPkgHasElem_DistributionServiceTypeCode, bool) (error)
	XsdGoPkgHasElem_FreightOnboardCode func (*XsdGoPkgHasElem_FreightOnboardCode, bool) (error)
	XsdGoPkgHasElem_ExpectedArrivalDate func (*XsdGoPkgHasElem_ExpectedArrivalDate, bool) (error)
	XsdGoPkgHasElems_AddressLine2 func (*XsdGoPkgHasElems_AddressLine2, bool) (error)
	XsdGoPkgHasElem_ProductOriginTypeCode func (*XsdGoPkgHasElem_ProductOriginTypeCode, bool) (error)
	XsdGoPkgHasElems_BasisDateTypeCode func (*XsdGoPkgHasElems_BasisDateTypeCode, bool) (error)
	XsdGoPkgHasElems_FreightOnboardCode func (*XsdGoPkgHasElems_FreightOnboardCode, bool) (error)
	XsdGoPkgHasElems_OrderLineStatusCode func (*XsdGoPkgHasElems_OrderLineStatusCode, bool) (error)
	XsdGoPkgHasElem_PaymentTermTypeCode func (*XsdGoPkgHasElem_PaymentTermTypeCode, bool) (error)
	XsdGoPkgHasElem_OrderClass func (*XsdGoPkgHasElem_OrderClass, bool) (error)
	XsdGoPkgHasElem_OrderRequestingSystemCode func (*XsdGoPkgHasElem_OrderRequestingSystemCode, bool) (error)
	XsdGoPkgHasElem_SubDiscountPercent func (*XsdGoPkgHasElem_SubDiscountPercent, bool) (error)
	XsdGoPkgHasElems_ZipCode func (*XsdGoPkgHasElems_ZipCode, bool) (error)
	XsdGoPkgHasElems_DiscountTypeCode func (*XsdGoPkgHasElems_DiscountTypeCode, bool) (error)
	XsdGoPkgHasElems_UnitOfMeasureCode func (*XsdGoPkgHasElems_UnitOfMeasureCode, bool) (error)
	XsdGoPkgHasElem_DocumentTypeCode func (*XsdGoPkgHasElem_DocumentTypeCode, bool) (error)
	XsdGoPkgHasElem_SkuShortDescription func (*XsdGoPkgHasElem_SkuShortDescription, bool) (error)
	XsdGoPkgHasElems_SkuNumber func (*XsdGoPkgHasElems_SkuNumber, bool) (error)
	XsdGoPkgHasElem_FreightTermCode func (*XsdGoPkgHasElem_FreightTermCode, bool) (error)
	XsdGoPkgHasElem_AdjustedOrderQuantity func (*XsdGoPkgHasElem_AdjustedOrderQuantity, bool) (error)
	XsdGoPkgHasElems_OrderHeaderVersionNumber func (*XsdGoPkgHasElems_OrderHeaderVersionNumber, bool) (error)
	XsdGoPkgHasElems_PaymentTermNumber func (*XsdGoPkgHasElems_PaymentTermNumber, bool) (error)
	XsdGoPkgHasElems_OrderLineVersionNumber func (*XsdGoPkgHasElems_OrderLineVersionNumber, bool) (error)
	XsdGoPkgHasElem_VendorCertifiedFlag func (*XsdGoPkgHasElem_VendorCertifiedFlag, bool) (error)
	XsdGoPkgHasElems_OrderDetails func (*XsdGoPkgHasElems_OrderDetails, bool) (error)
	XsdGoPkgHasElems_ConsignmentFlag func (*XsdGoPkgHasElems_ConsignmentFlag, bool) (error)
	XsdGoPkgHasElems_InTransitQuantity func (*XsdGoPkgHasElems_InTransitQuantity, bool) (error)
	XsdGoPkgHasElems_OrderCreateDate func (*XsdGoPkgHasElems_OrderCreateDate, bool) (error)
	XsdGoPkgHasElems_AccountOrderTypeCode func (*XsdGoPkgHasElems_AccountOrderTypeCode, bool) (error)
	XsdGoPkgHasElems_SpecialOrderFlag func (*XsdGoPkgHasElems_SpecialOrderFlag, bool) (error)
	XsdGoPkgHasElems_TotalOrderQuantity func (*XsdGoPkgHasElems_TotalOrderQuantity, bool) (error)
	XsdGoPkgHasElem_OmtOrderTypeCode func (*XsdGoPkgHasElem_OmtOrderTypeCode, bool) (error)
	XsdGoPkgHasElems_OrderHeader func (*XsdGoPkgHasElems_OrderHeader, bool) (error)
	XsdGoPkgHasElems_ReplenishmentMethodCode func (*XsdGoPkgHasElems_ReplenishmentMethodCode, bool) (error)
	XsdGoPkgHasElems_OrderClass func (*XsdGoPkgHasElems_OrderClass, bool) (error)
	XsdGoPkgHasElems_SrcOrderRefId func (*XsdGoPkgHasElems_SrcOrderRefId, bool) (error)
	XsdGoPkgHasElem_SrcOrderRefId func (*XsdGoPkgHasElem_SrcOrderRefId, bool) (error)
	XsdGoPkgHasElem_ZipCode func (*XsdGoPkgHasElem_ZipCode, bool) (error)
	XsdGoPkgHasElems_MerchandisingVendorNumber func (*XsdGoPkgHasElems_MerchandisingVendorNumber, bool) (error)
	XsdGoPkgHasElems_BuyPackVolume func (*XsdGoPkgHasElems_BuyPackVolume, bool) (error)
	XsdGoPkgHasElem_BuyPackVolume func (*XsdGoPkgHasElem_BuyPackVolume, bool) (error)
	XsdGoPkgHasElem_PaymentTermNumber func (*XsdGoPkgHasElem_PaymentTermNumber, bool) (error)
	XsdGoPkgHasElem_OnOrderNotShippedQuantity func (*XsdGoPkgHasElem_OnOrderNotShippedQuantity, bool) (error)
	TxsdOrderCanonical func (*TxsdOrderCanonical, bool) (error)
	XsdGoPkgHasElems_OrderStatusCode func (*XsdGoPkgHasElems_OrderStatusCode, bool) (error)
	XsdGoPkgHasElem_DiscountTypeCode func (*XsdGoPkgHasElem_DiscountTypeCode, bool) (error)
	XsdGoPkgHasElem_TotalShippedQuantity func (*XsdGoPkgHasElem_TotalShippedQuantity, bool) (error)
	XsdGoPkgHasElems_OrderOpenSystemUserId func (*XsdGoPkgHasElems_OrderOpenSystemUserId, bool) (error)
	XsdGoPkgHasElems_LineUpdatedFlag func (*XsdGoPkgHasElems_LineUpdatedFlag, bool) (error)
	XsdGoPkgHasCdata func (*XsdGoPkgHasCdata, bool) (error)
	XsdGoPkgHasElem_SkuNumber func (*XsdGoPkgHasElem_SkuNumber, bool) (error)
	XsdGoPkgHasElems_OrderReasonCode func (*XsdGoPkgHasElems_OrderReasonCode, bool) (error)
	XsdGoPkgHasElem_SubDiscount func (*XsdGoPkgHasElem_SubDiscount, bool) (error)
	XsdGoPkgHasElems_BuyPackSize func (*XsdGoPkgHasElems_BuyPackSize, bool) (error)
	XsdGoPkgHasElems_BuyPackWeightUomCode func (*XsdGoPkgHasElems_BuyPackWeightUomCode, bool) (error)
	XsdGoPkgHasElem_BuyPackWeight func (*XsdGoPkgHasElem_BuyPackWeight, bool) (error)
	XsdGoPkgHasElem_TotalOrderVolumeUomCode func (*XsdGoPkgHasElem_TotalOrderVolumeUomCode, bool) (error)
	XsdGoPkgHasElems_PaymentTermDetail func (*XsdGoPkgHasElems_PaymentTermDetail, bool) (error)
	XsdGoPkgHasElem_StoreExceptionRequestFlag func (*XsdGoPkgHasElem_StoreExceptionRequestFlag, bool) (error)
	XsdGoPkgHasElems_DiscountPercent func (*XsdGoPkgHasElems_DiscountPercent, bool) (error)
	XsdGoPkgHasElems_UniversalProductCode func (*XsdGoPkgHasElems_UniversalProductCode, bool) (error)
	TxsdSubDiscount func (*TxsdSubDiscount, bool) (error)
	XsdGoPkgHasElems_DistributionServiceTypeCode func (*XsdGoPkgHasElems_DistributionServiceTypeCode, bool) (error)
	XsdGoPkgHasElem_OrderOpenTimestamp func (*XsdGoPkgHasElem_OrderOpenTimestamp, bool) (error)
	XsdGoPkgHasElem_OrderCreateTimestamp func (*XsdGoPkgHasElem_OrderCreateTimestamp, bool) (error)
	XsdGoPkgHasElem_SkuDescription func (*XsdGoPkgHasElem_SkuDescription, bool) (error)
	XsdGoPkgHasElems_TotalNumberOfDetailLines func (*XsdGoPkgHasElems_TotalNumberOfDetailLines, bool) (error)
}
